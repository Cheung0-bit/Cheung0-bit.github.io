<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bruce Zhang&#39;s Blogs</title>
  
  
  <link href="https://cheung0-bit.github.io/atom.xml" rel="self"/>
  
  <link href="https://cheung0-bit.github.io/"/>
  <updated>2023-12-01T06:20:16.413Z</updated>
  <id>https://cheung0-bit.github.io/</id>
  
  <author>
    <name>张林</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从Leetcode上学字典树</title>
    <link href="https://cheung0-bit.github.io/ede49e41292e/"/>
    <id>https://cheung0-bit.github.io/ede49e41292e/</id>
    <published>2023-12-01T06:18:27.000Z</published>
    <updated>2023-12-01T06:20:16.413Z</updated>
    
    <content type="html"><![CDATA[<p>字典树（前缀树）Trie是一种数据结构，用于高效的存储和检索字符串数据集中的键。应用场景：自动补充和拼写检查</p><h2 id="Leetcode-208-实现前缀树"><a href="#Leetcode-208-实现前缀树" class="headerlink" title="Leetcode.208 实现前缀树"></a>Leetcode.208 实现前缀树</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Trie[] children;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> isEnd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Trie</span><span class="params">()</span> &#123;</span><br><span class="line">        children = <span class="keyword">new</span> <span class="title class_">Trie</span>[<span class="number">26</span>];</span><br><span class="line">        isEnd = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">Trie</span> <span class="variable">node</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;word.length();i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> ch - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(node.children[index]==<span class="literal">null</span>) &#123;</span><br><span class="line">                node.children[index] = <span class="keyword">new</span> <span class="title class_">Trie</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            node = node.children[index];</span><br><span class="line">        &#125;</span><br><span class="line">        node.isEnd = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">Trie</span> <span class="variable">node</span> <span class="operator">=</span> searchPrefix(word);</span><br><span class="line">        <span class="keyword">return</span> node != <span class="literal">null</span> &amp;&amp; node.isEnd;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">startsWith</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> searchPrefix(prefix) != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Trie <span class="title function_">searchPrefix</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">        <span class="type">Trie</span> <span class="variable">node</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;prefix.length();i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> prefix.charAt(i);</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> ch - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(node.children[index]==<span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            node = node.children[index];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your Trie object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * Trie obj = new Trie();</span></span><br><span class="line"><span class="comment"> * obj.insert(word);</span></span><br><span class="line"><span class="comment"> * boolean param_2 = obj.search(word);</span></span><br><span class="line"><span class="comment"> * boolean param_3 = obj.startsWith(prefix);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>这里使用了Trie数组来存储子节点，也可以使用TreeMap来实现</p><h2 id="Leetcode-720-字典中最长的单词"><a href="#Leetcode-720-字典中最长的单词" class="headerlink" title="Leetcode.720 字典中最长的单词"></a>Leetcode.720 字典中最长的单词</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">longestWord</span><span class="params">(String[] words)</span> &#123;</span><br><span class="line">        <span class="type">Trie</span> <span class="variable">trie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Trie</span>();</span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">            trie.insert(word);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">longest</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">            <span class="keyword">if</span> (trie.search(word)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (word.length() &gt; longest.length() || (word.length() == longest.length() &amp;&amp; word.compareTo(longest) &lt; <span class="number">0</span>)) &#123;</span><br><span class="line">                    longest = word;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> longest;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line">    Trie[] children;</span><br><span class="line">    <span class="type">boolean</span> isEnd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Trie</span><span class="params">()</span> &#123;</span><br><span class="line">        children = <span class="keyword">new</span> <span class="title class_">Trie</span>[<span class="number">26</span>];</span><br><span class="line">        isEnd = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">Trie</span> <span class="variable">node</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> ch - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (node.children[index] == <span class="literal">null</span>) &#123;</span><br><span class="line">                node.children[index] = <span class="keyword">new</span> <span class="title class_">Trie</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            node = node.children[index];</span><br><span class="line">        &#125;</span><br><span class="line">        node.isEnd = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">Trie</span> <span class="variable">node</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> ch - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (node.children[index] == <span class="literal">null</span> || !node.children[index].isEnd) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            node = node.children[index];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node != <span class="literal">null</span> &amp;&amp; node.isEnd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题是对Trim的完美应用。精辟的在于search()函数中，一旦该字符串的节点路径上存在节点的isEnd属性为假，那么就将该字符串抛弃</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;字典树（前缀树）Trie是一种数据结构，用于高效的存储和检索字符串数据集中的键。应用场景：自动补充和拼写检查&lt;/p&gt;
&lt;h2 id=&quot;Leetcode-208-实现前缀树&quot;&gt;&lt;a href=&quot;#Leetcode-208-实现前缀树&quot; class=&quot;headerlink&quot; t</summary>
      
    
    
    
    <category term="面试" scheme="https://cheung0-bit.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="数据结构与算法" scheme="https://cheung0-bit.github.io/categories/%E9%9D%A2%E8%AF%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数据结构与算法" scheme="https://cheung0-bit.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>排序整理</title>
    <link href="https://cheung0-bit.github.io/15eb14644a19/"/>
    <id>https://cheung0-bit.github.io/15eb14644a19/</id>
    <published>2023-11-27T07:21:00.000Z</published>
    <updated>2023-11-27T07:27:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>排序算法分内部排序和外部排序。内部排序是把数据记录放在内存中排序，外部排序由于数据量一般较大，内存不够，需要访问外存。</p><ul><li>内部排序<ul><li>交换排序<ul><li>冒泡</li><li>快排</li></ul></li><li>插入排序<ul><li>直接插入</li><li>希尔</li></ul></li><li>选择排序<ul><li>简单选择</li><li>堆排</li></ul></li><li>归并排序</li><li>基数排序</li></ul></li><li>外部排序</li></ul><p>“八大排序”即冒泡排序、快速排序、直接插入排序、shell排序、简单选择排序、堆排序、归并排序和基数排序</p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20231127124830585.png" alt="image-20231127124830585"></p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> arr.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h3 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l, j = r;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> arr[l];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt;= x) &#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt;= x) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[j] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    arr[i] = x;</span><br><span class="line">    quickSort(arr, l, i - <span class="number">1</span>);</span><br><span class="line">    quickSort(arr, i + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多线程执行"><a href="#多线程执行" class="headerlink" title="多线程执行"></a>多线程执行</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">QuickSortTask</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] arr;</span><br><span class="line">    <span class="type">int</span> left;</span><br><span class="line">    <span class="type">int</span> right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">QuickSortTask</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.arr = arr;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left, j = right;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt;= x) &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[i] = arr[j];</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt;= x) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        arr[i] = x;</span><br><span class="line">        <span class="type">QuickSortTask</span> <span class="variable">quickSortTaskLeft</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QuickSortTask</span>(arr, left, i - <span class="number">1</span>);</span><br><span class="line">        <span class="type">QuickSortTask</span> <span class="variable">quickSortTaskRight</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QuickSortTask</span>(arr, i + <span class="number">1</span>, right);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">left</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(quickSortTaskLeft);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">right</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(quickSortTaskRight);</span><br><span class="line">        left.start();</span><br><span class="line">        right.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            left.join();</span><br><span class="line">            right.join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Fork-Join框架"><a href="#Fork-Join框架" class="headerlink" title="Fork&#x2F;Join框架"></a>Fork&#x2F;Join框架</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">QuickSortTask</span> <span class="keyword">extends</span> <span class="title class_">RecursiveAction</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] arr;</span><br><span class="line">    <span class="type">int</span> left;</span><br><span class="line">    <span class="type">int</span> right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">QuickSortTask</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.arr = arr;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left, j = right;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt;= x) &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[i] = arr[j];</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt;= x) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        arr[i] = x;</span><br><span class="line">        <span class="type">QuickSortTask</span> <span class="variable">quickSortTaskLeft</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QuickSortTask</span>(arr, left, i - <span class="number">1</span>);</span><br><span class="line">        <span class="type">QuickSortTask</span> <span class="variable">quickSortTaskRight</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QuickSortTask</span>(arr, i + <span class="number">1</span>, right);</span><br><span class="line">        invokeAll(quickSortTaskLeft, quickSortTaskRight);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">insertSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; arr[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            temp = arr[i];</span><br><span class="line">            <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp; j--) &#123;</span><br><span class="line">                arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">selectSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[min]) &#123;</span><br><span class="line">                min = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        arr[i] = arr[min];</span><br><span class="line">        arr[min] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] mergeSort(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right) &#123;</span><br><span class="line">    <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;arr[left]&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + right &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> mergeTwoArray(mergeSort(arr, left, mid), mergeSort(arr, mid + <span class="number">1</span>, right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] mergeTwoArray(<span class="type">int</span>[] left, <span class="type">int</span>[] right) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[left.length + right.length];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; left.length &amp;&amp; j &lt; right.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (left[i] &lt;= right[j]) &#123;</span><br><span class="line">            res[k++] = left[i++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res[k++] = right[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; left.length) &#123;</span><br><span class="line">        res[k++] = left[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; right.length) &#123;</span><br><span class="line">        res[k++] = right[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>以大根堆为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">heapSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> arr.length;</span><br><span class="line">    buildMaxHeap(arr, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> len - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        swap(arr, i, <span class="number">0</span>);</span><br><span class="line">        len--;</span><br><span class="line">        adjustHeap(arr, <span class="number">0</span>, len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">buildMaxHeap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> len &gt;&gt; <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        adjustHeap(arr, i, len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">adjustHeap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> i * <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> i;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; len &amp;&amp; arr[left] &gt; arr[max]) &#123;</span><br><span class="line">        max = left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (right &lt; len &amp;&amp; arr[right] &gt; arr[max]) &#123;</span><br><span class="line">        max = right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i != max) &#123;</span><br><span class="line">        swap(arr, i, max);</span><br><span class="line">        adjustHeap(arr, max, len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;排序算法分内部排序和外部排序。内部排序是把数据记录放在内存中排序，外部排序由于数据量一般较大，内存不够，需要访问外存。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内部排序&lt;ul&gt;
&lt;li&gt;交换排序&lt;ul&gt;
&lt;li&gt;冒泡&lt;/li&gt;
&lt;li&gt;快排&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;插入</summary>
      
    
    
    
    <category term="面试" scheme="https://cheung0-bit.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="数据结构与算法" scheme="https://cheung0-bit.github.io/categories/%E9%9D%A2%E8%AF%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数据结构与算法" scheme="https://cheung0-bit.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>SpringSecurityOAuth2的自定义返回方案</title>
    <link href="https://cheung0-bit.github.io/e4b16aee6d6d/"/>
    <id>https://cheung0-bit.github.io/e4b16aee6d6d/</id>
    <published>2023-03-16T06:49:13.000Z</published>
    <updated>2023-11-30T12:21:14.047Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用Spring Security OAuth2时，源码对于返回消息没有做一个统一的封装。为了统一规范，我们可以采取一些措施。</p><p>下图是原初访问**&#x2F;oauth&#x2F;token**获取token时，成功和失败（源码抛出异常时的响应示例）</p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20230316145452918.png" alt="image-20230316145452918"></p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20230316145519096.png" alt="image-20230316145519096"></p><h2 id="基于AOP的切点表示式"><a href="#基于AOP的切点表示式" class="headerlink" title="基于AOP的切点表示式"></a>基于AOP的切点表示式</h2><p>观察控制台日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2023-03-16 14:55:08.940  WARN 25476 --- [io-63070-exec-5] o.s.s.o.p.e.TokenEndpoint                : Handling error: InvalidGrantException, 用户名或密码错误</span><br></pre></td></tr></table></figure><p>可以得到程序是在<strong>TokenEndpoint</strong>类中接受了处理，并返回了结果</p><p>阅读源码发现<img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20230316145920029.png" alt="image-20230316145920029"></p><p><strong>postAccessToken</strong>和<strong>handleException</strong>方法处理了信息的返回</p><p>那么思路很暴力很简单，切点表达式，直接对这两个方法做AOP处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthTokenAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* org.springframework.security.oauth2.provider.endpoint.TokenEndpoint.postAccessToken(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">handleControllerMethod</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        RestResponse&lt;Object&gt; response = <span class="keyword">new</span> <span class="title class_">RestResponse</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">        <span class="keyword">if</span> (proceed != <span class="literal">null</span>) &#123;</span><br><span class="line">            ResponseEntity&lt;OAuth2AccessToken&gt; responseEntity = (ResponseEntity&lt;OAuth2AccessToken&gt;) proceed;</span><br><span class="line">            <span class="type">OAuth2AccessToken</span> <span class="variable">body</span> <span class="operator">=</span> responseEntity.getBody();</span><br><span class="line">            <span class="keyword">if</span> (responseEntity.getStatusCode().is2xxSuccessful()) &#123;</span><br><span class="line">                response.setCode(<span class="number">0</span>);</span><br><span class="line">                Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">                <span class="keyword">assert</span> body != <span class="literal">null</span>;</span><br><span class="line">                map.put(<span class="string">&quot;access_token&quot;</span>, body.getValue());</span><br><span class="line">                map.put(<span class="string">&quot;token_type&quot;</span>, body.getTokenType());</span><br><span class="line">                map.put(<span class="string">&quot;refresh_token&quot;</span>, body.getRefreshToken().getValue());</span><br><span class="line">                map.put(<span class="string">&quot;expires_in&quot;</span>, body.getExpiresIn());</span><br><span class="line">                map.put(<span class="string">&quot;scope&quot;</span>, body.getScope());</span><br><span class="line">                map.put(<span class="string">&quot;jti&quot;</span>, body.getAdditionalInformation().get(<span class="string">&quot;jti&quot;</span>));</span><br><span class="line">                response.setData(map);</span><br><span class="line">                response.setMsg(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                response.setCode(-<span class="number">1</span>);</span><br><span class="line">                response.setMsg(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity</span><br><span class="line">                .status(<span class="number">200</span>)</span><br><span class="line">                .body(response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* org.springframework.security.oauth2.provider.endpoint.TokenEndpoint.handleException(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">handleException</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">        ResponseEntity&lt;OAuth2Exception&gt; response = (ResponseEntity&lt;OAuth2Exception&gt;) proceed;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity</span><br><span class="line">                .status(<span class="number">200</span>)</span><br><span class="line">                .body(RestResponse.validFail(Objects.requireNonNull(response.getBody()).getMessage()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>RestResponse</code>是我自己封装的同意返回体</p><p>得到返回结果：</p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20230316150151554.png" alt="image-20230316150151554"></p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20230316150205344.png" alt="image-20230316150205344"></p><h2 id="基于全局MVC增强"><a href="#基于全局MVC增强" class="headerlink" title="基于全局MVC增强"></a>基于全局MVC增强</h2><p>本到这里就结束了，可笔者认为此方法不过完美，在网上得到了重写<code>/oauth/token</code>等MVC端点，再使用@ControllerAdvice增强来实现，十分优雅。故做此纪录：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/oauth&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorityController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> TokenEndpoint tokenEndpoint;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Oauth2登录认证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/token&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="keyword">public</span> RestResponse&lt;Oauth2TokenDto&gt; <span class="title function_">postAccessToken</span><span class="params">(Principal principal, <span class="meta">@RequestParam</span> Map&lt;String, String&gt; parameters)</span> <span class="keyword">throws</span> HttpRequestMethodNotSupportedException &#123;</span><br><span class="line">        <span class="type">OAuth2AccessToken</span> <span class="variable">oAuth2AccessToken</span> <span class="operator">=</span> tokenEndpoint.postAccessToken(principal, parameters).getBody();</span><br><span class="line">        <span class="type">Oauth2TokenDto</span> <span class="variable">oauth2TokenDto</span> <span class="operator">=</span> Oauth2TokenDto.builder()</span><br><span class="line">                .accessToken(oAuth2AccessToken.getValue())</span><br><span class="line">                .refreshToken(oAuth2AccessToken.getRefreshToken().getValue())</span><br><span class="line">                .expiresIn(oAuth2AccessToken.getExpiresIn())</span><br><span class="line">                .tokenHead(<span class="string">&quot;Bearer &quot;</span>)</span><br><span class="line">                .scope(oAuth2AccessToken.getScope())</span><br><span class="line">                .jti(oAuth2AccessToken.getAdditionalInformation().get(<span class="string">&quot;jti&quot;</span>).toString()).build();</span><br><span class="line">        <span class="keyword">return</span> RestResponse.success(oauth2TokenDto);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里新建一个Controller类重写了postAccessToken的处理逻辑，并新建了OAuth2AccessToken类返回结果信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Oauth2TokenDto</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问令牌</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String accessToken;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 刷新令牌</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String refreshToken;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问令牌头前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String tokenHead;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有效时间（秒）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> expiresIn;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求域</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; scope;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * jti</span></span><br><span class="line"><span class="comment">     * JWT的唯一标识</span></span><br><span class="line"><span class="comment">     * 可避免重放攻击</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String jti;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于异常信息，我直接定义一个全局异常来处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span><span class="comment">//将信息返回为 json格式</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span><span class="comment">//此方法捕获Exception异常</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)</span><span class="comment">//状态码返回500</span></span><br><span class="line">    <span class="keyword">public</span> RestResponse&lt;String&gt; <span class="title function_">doException</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;捕获异常：&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> RestResponse.validFail(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20230316154512487.png" alt="image-20230316154512487"></p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20230316154522929.png" alt="image-20230316154522929"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>为了”统一规范“，这里造成了不少的牺牲，让代码侵入性变的很强，我认为不如和前端约定好，关于OAuth2的模块的返回结果进行针对性的处理。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;使用Spring Security OAuth2时，源码对于返回消息没有做一个统一的封装。为了统一规范，我们可以采取一些措施。&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="开发实践" scheme="https://cheung0-bit.github.io/categories/%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/"/>
    
    
    <category term="Spring Security OAuth2" scheme="https://cheung0-bit.github.io/tags/Spring-Security-OAuth2/"/>
    
  </entry>
  
  <entry>
    <title>建造者模式小记</title>
    <link href="https://cheung0-bit.github.io/cbba33b008f0/"/>
    <id>https://cheung0-bit.github.io/cbba33b008f0/</id>
    <published>2023-03-16T04:41:54.000Z</published>
    <updated>2023-11-30T12:21:14.068Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当一个类的属性足够多时，且不确定在构造对象时，哪些属性必须，哪些是非必须的。此时，创建该对象这件事情变的不确定。我们也许要排列组合般的写上无数个构造函数，这样显得十分臃肿。此时，一个较为优雅的设计模式应运而生—建造者模式（Builder Pattern）</p><h2 id="传统形式"><a href="#传统形式" class="headerlink" title="传统形式"></a>传统形式</h2><p>传统的建造者模式由四大部分组成：Product（最终要生成的对象）、Builder（创建着的抽象基类）、ConcreteBuilder（Builder实现类，负责干活）、Director（调用类）</p><p>代码示例：</p><p>下面是一个Product电脑类，由必须部分和非必须部分组成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 必须</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String cpu;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 必须</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String gpu;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 非必须</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String os;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 非必须</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String keyboard;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 非必须</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String display;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Computer</span><span class="params">(String cpu, String gpu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cpu = cpu;</span><br><span class="line">        <span class="built_in">this</span>.gpu = gpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个抽象的Builder：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Builder</span>&lt;T&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建行为的抽象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    T <span class="title function_">build</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义两个不通品牌电脑的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WindowsComputerBuilder</span> <span class="keyword">implements</span> <span class="title class_">Builder</span>&lt;Computer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Computer computer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> WindowsComputerBuilder <span class="title function_">builder</span><span class="params">(String cpu, String gpu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.computer = <span class="keyword">new</span> <span class="title class_">Computer</span>(cpu, gpu);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> WindowsComputerBuilder <span class="title function_">os</span><span class="params">(String os)</span> &#123;</span><br><span class="line">        computer.setOs(os);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> WindowsComputerBuilder <span class="title function_">keyboard</span><span class="params">(String keyboard)</span> &#123;</span><br><span class="line">        computer.setKeyboard(keyboard);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> WindowsComputerBuilder <span class="title function_">display</span><span class="params">(String display)</span> &#123;</span><br><span class="line">        computer.setDisplay(display);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Computer <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MacComputerBuilder</span> <span class="keyword">implements</span> <span class="title class_">Builder</span>&lt;Computer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Computer computer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MacComputerBuilder <span class="title function_">builder</span><span class="params">(String cpu, String gpu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.computer = <span class="keyword">new</span> <span class="title class_">Computer</span>(cpu, gpu);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MacComputerBuilder <span class="title function_">os</span><span class="params">(String os)</span> &#123;</span><br><span class="line">        computer.setOs(os);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MacComputerBuilder <span class="title function_">keyboard</span><span class="params">(String keyboard)</span> &#123;</span><br><span class="line">        computer.setKeyboard(keyboard);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MacComputerBuilder <span class="title function_">display</span><span class="params">(String display)</span> &#123;</span><br><span class="line">        computer.setDisplay(display);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Computer <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> computer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Director生产两种不同的电脑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Director</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 建造一个windows电脑</span></span><br><span class="line">        <span class="type">Computer</span> <span class="variable">windows</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WindowsComputerBuilder</span>().builder(<span class="string">&quot;intel&quot;</span>, <span class="string">&quot;rtx&quot;</span>)</span><br><span class="line">                .os(<span class="string">&quot;windows&quot;</span>)</span><br><span class="line">                .keyboard(<span class="string">&quot;windows键盘&quot;</span>)</span><br><span class="line">                .display(<span class="string">&quot;windows显示器&quot;</span>).build();</span><br><span class="line">        System.out.println(windows);</span><br><span class="line">        <span class="comment">// 建造一个mac电脑</span></span><br><span class="line">        <span class="type">Computer</span> <span class="variable">macbook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MacComputerBuilder</span>().builder(<span class="string">&quot;m2&quot;</span>, <span class="string">&quot;intel hd&quot;</span>)</span><br><span class="line">                .os(<span class="string">&quot;macos&quot;</span>)</span><br><span class="line">                .keyboard(<span class="string">&quot;mac键盘&quot;</span>)</span><br><span class="line">                .display(<span class="string">&quot;mac显示器&quot;</span>).build();</span><br><span class="line">        System.out.println(macbook);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，Builder Pattern生成对象时一般都会执行链式调用，且区分除了必须和非必须的参数</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Computer(cpu=intel, gpu=rtx, os=windows, keyboard=键盘, display=显示器)</span><br><span class="line">Computer(cpu=m2, gpu=intel hd, os=macos, keyboard=键盘, display=显示器)</span><br></pre></td></tr></table></figure><p>这样做，构建对象时显得更为优雅</p><h2 id="JAVA中简化方式"><a href="#JAVA中简化方式" class="headerlink" title="JAVA中简化方式"></a>JAVA中简化方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 必须</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String cpu;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 必须</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String gpu;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 非必须</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String os;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 非必须</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String keyboard;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 非必须</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String display;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Computer</span><span class="params">(Builder builder)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cpu = builder.cpu;</span><br><span class="line">        <span class="built_in">this</span>.gpu = builder.gpu;</span><br><span class="line">        <span class="built_in">this</span>.os = builder.os;</span><br><span class="line">        <span class="built_in">this</span>.keyboard = builder.keyboard;</span><br><span class="line">        <span class="built_in">this</span>.display = builder.display;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Builder</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String cpu;</span><br><span class="line">        <span class="keyword">private</span> String gpu;</span><br><span class="line">        <span class="keyword">private</span> String os;</span><br><span class="line">        <span class="keyword">private</span> String keyboard;</span><br><span class="line">        <span class="keyword">private</span> String display;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Builder</span><span class="params">(String cpu, String gpu)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.cpu = cpu;</span><br><span class="line">            <span class="built_in">this</span>.gpu = gpu;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">os</span><span class="params">(String os)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.os = os;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">keyboard</span><span class="params">(String keyboard)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.keyboard = keyboard;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">display</span><span class="params">(String display)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.display = display;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Computer <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Computer</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将构建者成为了该类的一个静态内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Director</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 建造一个windows电脑</span></span><br><span class="line">        <span class="type">Computer</span> <span class="variable">windows</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>.Builder(<span class="string">&quot;intel&quot;</span>, <span class="string">&quot;rtx&quot;</span>)</span><br><span class="line">                .os(<span class="string">&quot;windows&quot;</span>)</span><br><span class="line">                .keyboard(<span class="string">&quot;windows键盘&quot;</span>)</span><br><span class="line">                .display(<span class="string">&quot;windows显示器&quot;</span>).build();</span><br><span class="line">        System.out.println(windows);</span><br><span class="line">        <span class="comment">// 建造一个mac电脑</span></span><br><span class="line">        <span class="type">Computer</span> <span class="variable">macbook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>.Builder(<span class="string">&quot;m2&quot;</span>, <span class="string">&quot;intel hd&quot;</span>)</span><br><span class="line">                .os(<span class="string">&quot;macos&quot;</span>)</span><br><span class="line">                .keyboard(<span class="string">&quot;mac键盘&quot;</span>)</span><br><span class="line">                .display(<span class="string">&quot;mac显示器&quot;</span>).build();</span><br><span class="line">        System.out.println(macbook);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用结果：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Computer(cpu=intel, gpu=rtx, os=windows, keyboard=windows键盘, display=windows显示器)</span><br><span class="line">Computer(cpu=m2, gpu=intel hd, os=macos, keyboard=mac键盘, display=mac显示器)</span><br></pre></td></tr></table></figure><h2 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h2><p><code>lombok</code>该SDK提供了@Builder注解，可以一键构建对象</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;当一个类的属性足够多时，且不确定在构造对象时，哪些属性必须，哪些是非必须的。此时，创建该对象这件事情变的不确定。我们也许要排列组合般的写上无</summary>
      
    
    
    
    <category term="面试" scheme="https://cheung0-bit.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="设计模式" scheme="https://cheung0-bit.github.io/categories/%E9%9D%A2%E8%AF%95/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://cheung0-bit.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>萌新装机记录</title>
    <link href="https://cheung0-bit.github.io/b248503da682/"/>
    <id>https://cheung0-bit.github.io/b248503da682/</id>
    <published>2022-12-11T06:03:00.000Z</published>
    <updated>2023-11-30T12:21:14.054Z</updated>
    
    <content type="html"><![CDATA[<h2 id="最近预算5500组了一个台式，下面是配置清单"><a href="#最近预算5500组了一个台式，下面是配置清单" class="headerlink" title="最近预算5500组了一个台式，下面是配置清单"></a>最近预算5500组了一个台式，下面是配置清单</h2><ul><li><input checked="" disabled="" type="checkbox"> 主板+CPU TUF B550M-PLUS重炮手WIFI II + R7 5700X ￥2249</li><li><input checked="" disabled="" type="checkbox"> 显卡 七彩虹RTX3050 8GB豪华版 3*90mm风扇 316.5x135x53.1mm ￥1849</li><li><input checked="" disabled="" type="checkbox"> 内存 3200MHz奕Pro马甲条8GX2 ￥298</li><li><input checked="" disabled="" type="checkbox"> SSD 西部数据1TB黑盘PCIe 4.0  ￥698.98</li><li><input checked="" disabled="" type="checkbox"> CPU风冷 九州风神玄冰400幻彩V5（4热管&#x2F;220W）￥85.90</li><li><input checked="" disabled="" type="checkbox"> 机箱+风扇 航嘉S920(海景房)+白色芈月风扇X9 ￥349</li><li><input checked="" disabled="" type="checkbox"> 电源 鑫谷额定650W全模组750电源 ￥319</li><li><input checked="" disabled="" type="checkbox"> 螺丝刀 绿林精密螺丝刀全套家用 ￥26.69</li><li><input checked="" disabled="" type="checkbox"> 硅脂 利民CPU导热硅脂TF4(1.5g) ￥14.90</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">共计：<span class="number">2249</span>+<span class="number">1849</span>+<span class="number">298</span>+<span class="number">698.98</span>+<span class="number">85.90</span>+<span class="number">349</span>+<span class="number">319</span>+<span class="number">26.69</span>+<span class="number">14.90</span>=<span class="number">5890.469999999998</span></span><br></pre></td></tr></table></figure><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20230223151554286.png" alt="image-20230223151506885"></p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20230223151658816.png" alt="image-20230223151658816"></p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20230223151633864.png" alt="image-20230223151633864"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;最近预算5500组了一个台式，下面是配置清单&quot;&gt;&lt;a href=&quot;#最近预算5500组了一个台式，下面是配置清单&quot; class=&quot;headerlink&quot; title=&quot;最近预算5500组了一个台式，下面是配置清单&quot;&gt;&lt;/a&gt;最近预算5500组了一个台式，下面是配置</summary>
      
    
    
    
    <category term="生活" scheme="https://cheung0-bit.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="装机" scheme="https://cheung0-bit.github.io/categories/%E7%94%9F%E6%B4%BB/%E8%A3%85%E6%9C%BA/"/>
    
    
    <category term="玩机" scheme="https://cheung0-bit.github.io/tags/%E7%8E%A9%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>搭建git私服</title>
    <link href="https://cheung0-bit.github.io/07a6b2ca1e89/"/>
    <id>https://cheung0-bit.github.io/07a6b2ca1e89/</id>
    <published>2022-12-04T13:43:01.000Z</published>
    <updated>2023-11-30T12:21:14.050Z</updated>
    
    <content type="html"><![CDATA[<p>通过搭建git私服，可以将自己的文件资源上传到自己的服务器，并随时的拉取更新，就像Github那样。<strong>那为什么不用Github呢？</strong>这里只是提供一种问题的解决方案。Github有时因为网络问题，也会与不好的用户体验，但绝大数时候Github是非常好的选择</p><h2 id="购置云服务器"><a href="#购置云服务器" class="headerlink" title="购置云服务器"></a>购置云服务器</h2><p>首先需要有一台服务器。推荐购买一台云服务器，这样host暴露在公务，随时可以访问。云服务器可在腾讯云、阿里云、Vultr等平台购买</p><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure><p>查看git版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><h2 id="配置用户连接"><a href="#配置用户连接" class="headerlink" title="配置用户连接"></a>配置用户连接</h2><p>这里可以新建一个<code>git</code>用户，专用于git相关服务，避免一些不安全的操作带来不可挽回的结果</p><p>然后，就是配置SSH密钥连接。<a href="https://www.runoob.com/w3cnote/set-ssh-login-key.html">菜鸟教程</a>有系统化的教程。其实很简单，我这里简单说明一下：</p><p>查看本地电脑的SSH公钥</p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20221204160057389.png" alt="image-20221204160057389"></p><p>将本地电脑SSH公钥上传到用户家目录<code>.ssh</code>文件夹下</p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20221204160225797.png" alt="image-20221204160225797"></p><p>在<code>.ssh</code>文件夹中新建<code>authorized_keys</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch authorized_keys  </span><br></pre></td></tr></table></figure><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20221204160239363.png" alt="image-20221204160239363"></p><p>将公钥写入authorized_keys </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys  </span><br></pre></td></tr></table></figure><p> 最后本地测试是否可以连接上</p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20221204160521449.png" alt="image-20221204160521449"></p><p>非常荣幸，我成功了</p><h2 id="创建Git仓库"><a href="#创建Git仓库" class="headerlink" title="创建Git仓库"></a>创建Git仓库</h2><p>这里，我在根目录下创建一个<strong>git</strong>文件夹</p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20221204195727536.png" alt="image-20221204195727536"></p><p>然后在git文件夹中创建一个git仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd git</span><br><span class="line">git init --bare test.git</span><br></pre></td></tr></table></figure><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20221204195946145.png" alt="image-20221204195946145"></p><p>我这里给出了一些warning，意思是使用<code>master</code>作为默认分支的名字，系统要求最好可以自己定义一个名字，建议是<code>main</code>、 <code>trunk</code>、<code>development</code>之类</p><p>最后在本地测试是否能克隆仓库</p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20221204200253279.png" alt="image-20221204200253279"></p><p>这里的命令组成是这样的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 用户名@域名:仓库绝对路径</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>按照上面的步骤，就可以成功的搭建一个Git服务器了，可以愉快的玩耍了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;通过搭建git私服，可以将自己的文件资源上传到自己的服务器，并随时的拉取更新，就像Github那样。&lt;strong&gt;那为什么不用Github呢？&lt;/strong&gt;这里只是提供一种问题的解决方案。Github有时因为网络问题，也会与不好的用户体验，但绝大数时候Github是非</summary>
      
    
    
    
    <category term="开发实践" scheme="https://cheung0-bit.github.io/categories/%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/"/>
    
    
    <category term="git" scheme="https://cheung0-bit.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>构造FIRST集、FOLLOW集、 LL(1)预测分析表</title>
    <link href="https://cheung0-bit.github.io/8b6d5177f990/"/>
    <id>https://cheung0-bit.github.io/8b6d5177f990/</id>
    <published>2022-12-02T07:28:52.661Z</published>
    <updated>2022-12-02T07:31:43.631Z</updated>
    
    <content type="html"><![CDATA[<h2 id="FIRST集构造"><a href="#FIRST集构造" class="headerlink" title="FIRST集构造"></a>FIRST集构造</h2><p>对于一条产生式：S-&gt;…</p><ol><li>若右边第一个符号是终结符或者ε，则 将其加入FIRST(S)</li><li>若右边第一个符号是非终结符，则将其FIRST集加入FIRST(S)</li><li>若右边第一个符号是非终结符，且随后紧跟多个非终结符，这是判断是否有ε<ol><li>若<strong>第i个</strong>非终结符有ε集，则可将<strong>i+1</strong>个非终结符去除ε的FIRST集加入FIRST(S)</li><li>若所有非终结符都能够推导出ε，则将ε也加入FIRST(S)</li></ol></li></ol><p>e.g 若给出G(S)如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">S-&gt;ABCD</span><br><span class="line">A-&gt;a|ε</span><br><span class="line">B-&gt;b|ε</span><br><span class="line">C-&gt;c</span><br><span class="line">D-&gt;d</span><br></pre></td></tr></table></figure><p>则FIRST(S)&#x3D; a,b,c</p><h2 id="FOLLOW集构造"><a href="#FOLLOW集构造" class="headerlink" title="FOLLOW集构造"></a>FOLLOW集构造</h2><ol><li>将所有产生式的候选式的非终结符都找到，定位到求解的FOLLOW集的非终结符的位置，从当前位置挨个检查</li><li>先检验这个非终结符的右边有无别的符号，例如<code>A-&gt;aBC</code>，求FOLLOW(B)时，其右侧有非终结符C的<ol><li>将右边符号的FIRST集中非空符号加入当前符号的FOLLOW集，若右边符号FIRST含有ε，则将FOLLOW(A)也加入FOLLOW(B)</li><li>若右边没有符号了，例如这里的 C，那么可以将 FOLLOW(A)中的元素全部加入到 FOLLOW(C)中</li></ol></li><li>断当前符号是不是文法的开始符号，比如 G[A] 中的非终结符 A 就是 G[A] 文法的开始符号，如果是的话就将“#”也加入到 FOLLOW集中去</li></ol><p>e.g 若给出文法如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E-&gt;E+T|T</span><br><span class="line">F-&gt;(E)|i</span><br><span class="line">T-&gt;F|T*E</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center"></th><th align="center">FIRST</th><th align="center">FOLLOW</th></tr></thead><tbody><tr><td align="center">E</td><td align="center">( i</td><td align="center"># ) +</td></tr><tr><td align="center">F</td><td align="center">( i</td><td align="center"># ) + *</td></tr><tr><td align="center">T</td><td align="center">( i</td><td align="center"># ) + *</td></tr></tbody></table><h2 id="预测表的构造"><a href="#预测表的构造" class="headerlink" title="预测表的构造"></a>预测表的构造</h2><p>首先构造出预测分析表的第一行与第一列，第一行为文法出现的所有终结符以及‘#’（注意：没有 ε ，因为 Follow 集不含 ε），第一列为文法出现的所有非终结符</p><p>对文法G的每个产生式A-&gt;α 执行如下步骤：</p><ol><li><p>对每个a∈First(α)，把 A-&gt;α 加入M[A,a]</p></li><li><p>若 ε∈First(α)，则对任何b∈Follow(A) ,把 A-&gt; ε加至M[A,b]中</p></li></ol><p>对如下文法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">S-&gt;AaS|BbS|d</span><br><span class="line">A-&gt;a</span><br><span class="line">B-&gt;ε|c</span><br></pre></td></tr></table></figure><p>举个例子，对于第一个产生式，FIRST(AaS)&#x3D;{a}，则将S-&gt;AaS加入到[S,a]</p><table><thead><tr><th></th><th>a</th><th>b</th><th>c</th><th>d</th></tr></thead><tbody><tr><td>S</td><td>S-&gt;AaS</td><td></td><td></td><td></td></tr><tr><td>A</td><td></td><td></td><td></td><td></td></tr><tr><td>B</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>而对于B-&gt;ε，计算FOLLOW(B)中的所有元素将其加入。FOLLOW(B) &#x3D; { b }，所以将产生式加入到M[B,b]</p><table><thead><tr><th></th><th>a</th><th>b</th><th>c</th><th>d</th></tr></thead><tbody><tr><td>S</td><td>S-&gt;AaS</td><td></td><td></td><td></td></tr><tr><td>A</td><td></td><td></td><td></td><td></td></tr><tr><td>B</td><td></td><td>B-&gt;ε</td><td></td><td></td></tr></tbody></table><p>最后得到的完整LL(1)分析表</p><table><thead><tr><th></th><th>a</th><th>b</th><th>c</th><th>d</th></tr></thead><tbody><tr><td>S</td><td>S-&gt;AaS</td><td>S-&gt;BbS</td><td>S-&gt;BbS</td><td>S-&gt;d</td></tr><tr><td>A</td><td>A-&gt;a</td><td></td><td></td><td></td></tr><tr><td>B</td><td></td><td>B-&gt;ε</td><td>B-&gt;c</td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;FIRST集构造&quot;&gt;&lt;a href=&quot;#FIRST集构造&quot; class=&quot;headerlink&quot; title=&quot;FIRST集构造&quot;&gt;&lt;/a&gt;FIRST集构造&lt;/h2&gt;&lt;p&gt;对于一条产生式：S-&amp;gt;…&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;若右边第一个符号是终结符或者ε，则</summary>
      
    
    
    
    <category term="开发实践" scheme="https://cheung0-bit.github.io/categories/%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/"/>
    
    
    <category term="编译原理" scheme="https://cheung0-bit.github.io/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>ArrayList和Vector</title>
    <link href="https://cheung0-bit.github.io/c38d47a6babf/"/>
    <id>https://cheung0-bit.github.io/c38d47a6babf/</id>
    <published>2022-08-20T13:45:37.000Z</published>
    <updated>2022-11-25T07:03:51.723Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天阅读ArrayList和Vector的源码，了解其底层结构和扩容机制</p><p>首先，需要知道的是</p><ul><li>ArrayList和Vector底层都是可变数组实现</li><li>ArrayList非线程安全，Vector是线程安全的</li></ul><h2 id="对比一下ArrayList和Vector的常量"><a href="#对比一下ArrayList和Vector的常量" class="headerlink" title="对比一下ArrayList和Vector的常量"></a>对比一下ArrayList和Vector的常量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractList</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 序列版本号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">8683452581122892189L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认大小为10</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 空的缓存数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缓存数组没有指定大小时 容量大小为空</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 底层实现方式 其实就是通过缓存数组 随时扩充容量 这里使用transient关键字 表示不参与ArrayList的序列化 原因每当ArrayList类序列化和反序列化时会分别调用writeObject和readObject方法读写相关数据 这样避免了缓存数组中存在多余的无用空间 避免占用内存</span></span><br><span class="line">    <span class="keyword">transient</span> Object[] elementData;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组的实际大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Vector</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">AbstractList</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 缓存数组</span></span><br><span class="line">    <span class="keyword">protected</span> Object[] elementData;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缓存数组中实际容量大小</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> elementCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义的容量增长量</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> capacityIncrement;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 序列化版本号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">2767605614048989439L</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结一下，ArrayList和Vector的底层都是通过缓存数组来实现的</p><p>ArrayList的elementData使用transient关键字修饰，不参与对象的序列化</p><p>而Vector的elelmentData没有参与对象的序列化，至于原因，网上说是因为重写了writeObject方法，因为Vector本质就是线程安全的，我不是很理解，希望有大佬再解释一下</p><h2 id="对比构造函数"><a href="#对比构造函数" class="headerlink" title="对比构造函数"></a>对比构造函数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无参构造 elementData默认为空数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给定初始大小的构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.elementData = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将已有的集合塞入构造</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">    Object[] a = c.toArray();</span><br><span class="line">    <span class="keyword">if</span> ((size = a.length) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c.getClass() == ArrayList.class) &#123;</span><br><span class="line">            elementData = a;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            elementData = Arrays.copyOf(a, size, Object[].class);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// replace with empty array.</span></span><br><span class="line">        elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无参构造 初始化容量大小为10</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Vector</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给定初始容量</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Vector</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(initialCapacity, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给定初始容量和每次容量的扩容值</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Vector</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">int</span> capacityIncrement)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    <span class="built_in">this</span>.elementData = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];</span><br><span class="line">    <span class="built_in">this</span>.capacityIncrement = capacityIncrement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将已有的集合塞入</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Vector</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">    Object[] a = c.toArray();</span><br><span class="line">    elementCount = a.length;</span><br><span class="line">    <span class="keyword">if</span> (c.getClass() == ArrayList.class) &#123;</span><br><span class="line">        elementData = a;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        elementData = Arrays.copyOf(a, elementCount, Object[].class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比而言，Vector的构造具有更多的自主性，开发者可以限定扩容时的增长值</p><h2 id="扩容机制"><a href="#扩容机制" class="headerlink" title="扩容机制"></a>扩容机制</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacityInternal</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calculateCapacity</span><span class="params">(Object[] elementData, <span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureExplicitCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当ArrayList添加元素时，会先将当前实际元素容量和缓存数组容量做对比，大小不够时则考虑扩容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">    elementData[elementCount++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacityHelper</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当Vector添加元素时，同ArrayList，容量不够则考虑扩容</p><p>其中，ArrayList多出的代码主要是因为Vector在无参构造时，默认初始化了10个空间，而ArrayList在添加第一个元素时，若缓存数组容量为默认值（空数组），则也给一个初始化的大小（10）</p><p>另外，Vector的add函数加上了同步锁，保证了线程的安全性</p><h3 id="ArrayList扩容细节"><a href="#ArrayList扩容细节" class="headerlink" title="ArrayList扩容细节"></a>ArrayList扩容细节</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一目了然，newCapcity &#x3D; oldCapcity + ( oldCapcity &gt;&gt; 1 ) </p><p>进行1.5倍扩容 若初始化空间为10 那么容量大小变化就为 10 -&gt; 15 -&gt; 22 -&gt; 33 -&gt; ……</p><h3 id="Vector扩容细节"><a href="#Vector扩容细节" class="headerlink" title="Vector扩容细节"></a>Vector扩容细节</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + ((capacityIncrement &gt; <span class="number">0</span>) ?</span><br><span class="line">                                     capacityIncrement : oldCapacity);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Vector中，若开发者没有自定义增长容量，则按2倍扩容，否则每次在当前容量的基础上加上开发者自定义的增长容量</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天阅读ArrayList和Vector的源码，了解其底层结构和扩容机制&lt;/p&gt;
&lt;p&gt;首先，需要知道的是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Arr</summary>
      
    
    
    
    <category term="面试" scheme="https://cheung0-bit.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="Java" scheme="https://cheung0-bit.github.io/categories/%E9%9D%A2%E8%AF%95/Java/"/>
    
    
    <category term="数据结构与算法" scheme="https://cheung0-bit.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="Java" scheme="https://cheung0-bit.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>HashMap</title>
    <link href="https://cheung0-bit.github.io/d895167cf8d2/"/>
    <id>https://cheung0-bit.github.io/d895167cf8d2/</id>
    <published>2022-08-19T13:41:23.000Z</published>
    <updated>2022-11-25T07:04:14.206Z</updated>
    
    <content type="html"><![CDATA[<h2 id="认识HashMap"><a href="#认识HashMap" class="headerlink" title="认识HashMap"></a>认识HashMap</h2><p>HashMap是平时开发中常用一种数据结构。其底层精妙的设计大大提高了我们开发出来的产品的底层性能。那么它是如何实现的，我们来一探究竟</p><h3 id="底层数据结构"><a href="#底层数据结构" class="headerlink" title="底层数据结构"></a>底层数据结构</h3><p>JDK1.7及之前 桶数组（bucket） + 链表</p><p>JDK1.8之后    当链表达到一定长度时 会转化为红黑树</p><p>其实就是哈希散列法中的“拉链法”，只不过当一条链长度过长时，为了增加查询数据的性能，在JDK1.8之后就会将链条树化（红黑树）</p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220731133023452.png" alt="image-20220731133023452"></p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认构造函数 加载因子为默认值0.75f</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含另一个“Map”的构造函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">    putMapEntries(m, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定了容器大小的构造函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定“容量大小”和“加载因子”的构造函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal initial capacity: &quot;</span> + initialCapacity);</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> + loadFactor);</span><br><span class="line">    <span class="built_in">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="built_in">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般常用的就是构建一个空的HashMap，别的构造函数涉及到了一些需要知道的概念，借此机会一次性说掉</p><h3 id="门限值"><a href="#门限值" class="headerlink" title="门限值"></a>门限值</h3><p>门限值Threshold就是扩容机制触发的一个阈值 计算公式为：</p><p> 门限值 &#x3D; 数组容量 X 负载因子</p><p>其中负载因子会在下面做出说明</p><h3 id="初始化容量"><a href="#初始化容量" class="headerlink" title="初始化容量"></a>初始化容量</h3><p>指的就是桶数组（bucket）的初始化大小 默认为16</p><p>为什么是16呢 简单的解释就是使用2的次方的容量可以在HASH取模运算后使得散列更加均匀 学过数据结构的朋友应该都有印象 书上建议初始化大小为2的次幂 在这里JDK开发者选择了16作为默认的值 </p><p>这些说明了为什么扩容时都是乘以2 就是为了保证桶数组的容量为2的次幂</p><p>在构造函数中若指定了一个初始的大小 则初始容量会进行计算 找到一个最近的2次幂数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.threshold = tableSizeFor(initialCapacity);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">tableSizeFor</span><span class="params">(<span class="type">int</span> cap)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> cap - <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>乍看是不是很懵逼 这个算法十分精妙 来理解一下</p><p>比如要求17对应的2次幂数 易得出是32</p><p>那么这个算法如何实现的呢  就是先将17 -1 得到 16 二进制就是 <code>10000</code> </p><p>只要将二进制数第一个为1的位置开始，后面的数字全变为1 最后再加上1  就是我们要的2次幂数了 <code>10000</code> -&gt; <code>11111(31)</code> -&gt; <code>31 + 1</code> -&gt; <code>32</code></p><p>这个算法就是实现将后面数全变为1的操作 那为什么是逻辑右移1，2，4，8，16 就结束了呢 </p><p>这样思考 一个位置为1 右移1位 就得到了两个1 此时右移2位 就得到了4各个1 以此类推 当右移16位时 刚好一个int类型位数操作完 自然可以得到任何int类型数据的所要求的二次幂数</p><h3 id="负载因子"><a href="#负载因子" class="headerlink" title="负载因子"></a>负载因子</h3><p>负载因子可以自定义，默认为0.75f</p><p>该参数用于调节散列效果 例如当负载因子为1时 数组需要到达容量大小则才开始扩容 不可避免会出现很多HASH冲突 导致某个节点的链条过长 影响查询性能 当负载因子为0.5时 每当数组容量使用了一半时就开始扩容了 虽然会大大降低HASH冲突的概率 但散列效果却会不尽如人意 于是取中间值0.75作为默认的负载因子 开发者可以根据需求 自由调节</p><h3 id="扰动函数"><a href="#扰动函数" class="headerlink" title="扰动函数"></a>扰动函数</h3><p>HashMap中有这样一个方法专门用于求键值的HASH值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见，在key求<code>hashcode</code>之后又将其与自己逻辑右移16位后的结果做了按位与操作，那么有两个问题</p><ul><li>为什么要做按位与<ul><li>保留<code>hashcode</code>的结果特征 增强散列效果</li></ul></li><li>为什么是16位<ul><li>因为<code>hashcode</code>表示数据范围是int类型数据范围 众所周知 int由32个bit组成 因此逻辑右移16位（一半距离） 以此结合一个<code>hashcode</code>高位和低位的特征 以降低在对桶数组容量取模运算后的hash冲突</li></ul></li></ul><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220731135448439.png" alt="image-20220731135448439"></p><blockquote><p>个人理解：这些参数的存在，就是为了数据有一个较好的散列效果，以增强数据查询插入的效率，以达到高性能的效果</p></blockquote><h2 id="HashMap基本操作和遍历"><a href="#HashMap基本操作和遍历" class="headerlink" title="HashMap基本操作和遍历"></a>HashMap基本操作和遍历</h2><p>先循环插入一些数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">14</span>; i++) &#123;</span><br><span class="line">    map.put(i, (<span class="type">int</span>) (Math.random() * <span class="number">100</span>));</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;直接输出HashMap&quot;</span>);</span><br><span class="line">System.out.println(map);</span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">直接输出HashMap</span><br><span class="line">&#123;0=43, 1=14, 2=54, 3=22, 4=75, 5=36, 6=73, 7=37, 8=46, 9=77, 10=69, 11=23, 12=63, 13=85&#125;</span><br></pre></td></tr></table></figure><p>这里可见HashMap以键值对的形式返回了数据</p><h3 id="4种遍历方式"><a href="#4种遍历方式" class="headerlink" title="4种遍历方式"></a>4种遍历方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ====ForEach循环遍历====</span></span><br><span class="line">System.out.println(<span class="string">&quot;Iterate entries using ForEach loop:&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; stringStringEntry : map.entrySet()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Key = &quot;</span> + stringStringEntry.getKey() + <span class="string">&quot;, Value = &quot;</span> + stringStringEntry.getValue());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ====ForEach迭代键值对方式====</span></span><br><span class="line">System.out.println(<span class="string">&quot;Iterate keys / values using ForEach loop:&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (Integer key : map.keySet()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Key=&quot;</span> + key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (Integer value : map.values()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Value=&quot;</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ====迭代器遍历===</span></span><br><span class="line">System.out.println(<span class="string">&quot;Iterate using Iterator with generics=v:&quot;</span>);</span><br><span class="line">Iterator&lt;Map.Entry&lt;Integer, Integer&gt;&gt; iterator = map.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    Map.Entry&lt;Integer, Integer&gt; entry = iterator.next();</span><br><span class="line">    System.out.println(<span class="string">&quot;Key=&quot;</span> + entry.getKey() + <span class="string">&quot; Value=&quot;</span> + entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ====Java Lambda表达式遍历====</span></span><br><span class="line">System.out.println(<span class="string">&quot;Iterate using Java 8 Lambda Expression:&quot;</span>);</span><br><span class="line">map.forEach((K, V) -&gt; System.out.println(<span class="string">&quot;key: &quot;</span> + K + <span class="string">&quot; value:&quot;</span> + V));</span><br></pre></td></tr></table></figure><p>打印结果太多 就不展示了 可以自己试一下 个人觉得Lambda表达式简直爱了好吗 Elegant And Concise 优雅且简洁</p><h2 id="底层数据结构的构建"><a href="#底层数据结构的构建" class="headerlink" title="底层数据结构的构建"></a>底层数据结构的构建</h2><p>下面就来看看所谓的桶数组+链表+红黑树到底是怎么构建 让我们一起撕开神秘的面纱</p><h3 id="节点类"><a href="#节点类" class="headerlink" title="节点类"></a>节点类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> hash;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    V value;</span><br><span class="line">    Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">    Node(<span class="type">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="built_in">this</span>.hash = hash;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> K <span class="title function_">getKey</span><span class="params">()</span>        &#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">getValue</span><span class="params">()</span>      &#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">toString</span><span class="params">()</span> &#123; <span class="keyword">return</span> key + <span class="string">&quot;=&quot;</span> + value; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">setValue</span><span class="params">(V newValue)</span> &#123;</span><br><span class="line">        <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> value;</span><br><span class="line">        value = newValue;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="built_in">this</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">            <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                Objects.equals(value, e.getValue()))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这便是HashMap中最基本的一个节点的构成 它实现了<code>Map.Entry&lt;K,V&gt;</code> Entry是Map的一个静态内部类，用于存放键值对</p><p>值得注意的是，这里Node的equals方法，是比较Key和Value的equals方法，在开发中，如果有需求要进行个性化的比较，就需要重写我们自己的Object类的equals方法了</p><h3 id="插入节点的putVal-方法"><a href="#插入节点的putVal-方法" class="headerlink" title="插入节点的putVal()方法"></a>插入节点的putVal()方法</h3><p>此方法是一个内部方法，仅在内部调用。在我们插入一个节点时，就会调用该方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>putVal方法也详细的展示了怎么构建这么一个精妙的数据结构的</p><p>先上源码 前方高能~~~</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">               <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>头疼的来了 看看怎么拆解 怎么理解</p><h4 id="做好预备工作"><a href="#做好预备工作" class="headerlink" title="做好预备工作"></a>做好预备工作</h4><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220731145208320.png" alt="image-20220731145208320"></p><p>这里进行一系列的初始化 tab即是桶数组容器 p就是插入的单个节点 若一上来table为null 则说明HashMap仅仅是做了初始化 还没有一个初始化的大小空间  那么就resize()方法分配初始空间 这里只要知道resize方法就是用来分配空间的 具体细节后面会做分析</p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220731145500014.png" alt="image-20220731145500014"></p><h4 id="第一种情况（当前位置为null）"><a href="#第一种情况（当前位置为null）" class="headerlink" title="第一种情况（当前位置为null）"></a>第一种情况（当前位置为null）</h4><p>HASH分配到的偏移位置还没有插入节点，那么二话不说，直接塞入新节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">    tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>值得注意的是 数组偏移是通过 (n - 1) &amp; hash 得到的 其实 这就是将hash对数组容量做了一个取默运算 只不过数组偏移是从0开始的 所以是n-1 非常精妙</p><h4 id="第二种情况（hash分配的位置相同且Key相同）"><a href="#第二种情况（hash分配的位置相同且Key相同）" class="headerlink" title="第二种情况（hash分配的位置相同且Key相同）"></a>第二种情况（hash分配的位置相同且Key相同）</h4><p>说明这是节点更新，直接将当前节点更新</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">    ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">    e = p;</span><br></pre></td></tr></table></figure><h4 id="第三种情况（加入红黑树节点）"><a href="#第三种情况（加入红黑树节点）" class="headerlink" title="第三种情况（加入红黑树节点）"></a>第三种情况（加入红黑树节点）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">    e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title function_">putTreeVal</span><span class="params">(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab,</span></span><br><span class="line"><span class="params">                               <span class="type">int</span> h, K k, V v)</span> &#123;</span><br><span class="line">    Class&lt;?&gt; kc = <span class="literal">null</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">searched</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    TreeNode&lt;K,V&gt; root = (parent != <span class="literal">null</span>) ? root() : <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = root;;) &#123;</span><br><span class="line">        <span class="type">int</span> dir, ph; K pk;</span><br><span class="line">        <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">            dir = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">            dir = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (k != <span class="literal">null</span> &amp;&amp; k.equals(pk)))</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                  (kc = comparableClassFor(k)) == <span class="literal">null</span>) ||</span><br><span class="line">                 (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!searched) &#123;</span><br><span class="line">                TreeNode&lt;K,V&gt; q, ch;</span><br><span class="line">                searched = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (((ch = p.left) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                     (q = ch.find(h, k, kc)) != <span class="literal">null</span>) ||</span><br><span class="line">                    ((ch = p.right) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                     (q = ch.find(h, k, kc)) != <span class="literal">null</span>))</span><br><span class="line">                    <span class="keyword">return</span> q;</span><br><span class="line">            &#125;</span><br><span class="line">            dir = tieBreakOrder(k, pk);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TreeNode&lt;K,V&gt; xp = p;</span><br><span class="line">        <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="literal">null</span>) &#123;</span><br><span class="line">            Node&lt;K,V&gt; xpn = xp.next;</span><br><span class="line">            TreeNode&lt;K,V&gt; x = map.newTreeNode(h, k, v, xpn);</span><br><span class="line">            <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</span><br><span class="line">                xp.left = x;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                xp.right = x;</span><br><span class="line">            xp.next = x;</span><br><span class="line">            x.parent = x.prev = xp;</span><br><span class="line">            <span class="keyword">if</span> (xpn != <span class="literal">null</span>)</span><br><span class="line">                ((TreeNode&lt;K,V&gt;)xpn).prev = x;</span><br><span class="line">            moveRootToFront(tab, balanceInsertion(root, x));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体怎么加入的，需要先了解红黑树，这里不做多说明</p><h4 id="第四种情况（加入链表节点）"><a href="#第四种情况（加入链表节点）" class="headerlink" title="第四种情况（加入链表节点）"></a>第四种情况（加入链表节点）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">            p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                treeifyBin(tab, hash);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash </span><br><span class="line">            ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        p = e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遍历链表，若hash值Key值均一样，则直接退出循环</p><p>若链表长度即将大于树化的门槛值，则要靠考虑进行树化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="type">int</span> hash)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, index; Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">        resize();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="literal">null</span>) &#123;</span><br><span class="line">        TreeNode&lt;K,V&gt; hd = <span class="literal">null</span>, tl = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (tl == <span class="literal">null</span>)</span><br><span class="line">                hd = p;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                p.prev = tl;</span><br><span class="line">                tl.next = p;</span><br><span class="line">            &#125;</span><br><span class="line">            tl = p;</span><br><span class="line">        &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">if</span> ((tab[index] = hd) != <span class="literal">null</span>)</span><br><span class="line">            hd.treeify(tab);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先会判断桶数组容量是否达到可以树化的最低标准，没有则先进行桶数组的扩容再HASH，达到了则将链表转化为红黑树</p><h3 id="HashMap的resize-方法"><a href="#HashMap的resize-方法" class="headerlink" title="HashMap的resize()方法"></a>HashMap的resize()方法</h3><p>在HashMap中，采用二次方扩容法</p><p>当HashMap在元素达到负载因子阈值时，便会自动扩容，以保证HASH得到很好的散列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line"><span class="type">int</span> <span class="variable">oldCap</span> <span class="operator">=</span> (oldTab == <span class="literal">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line"><span class="type">int</span> <span class="variable">oldThr</span> <span class="operator">=</span> threshold;</span><br><span class="line"><span class="type">int</span> newCap, newThr = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p><code>resize()</code>方法的一开始，进行一系列的初始化。下面分种情况来讨论</p><h4 id="无参构造的空HashMap"><a href="#无参构造的空HashMap" class="headerlink" title="无参构造的空HashMap"></a>无参构造的空HashMap</h4><p>由于是一个空的HashMap，<code>oldTable</code> <code>oldCap</code> <code>oldThr</code>均为空</p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220819114543226.png" alt="image-20220819114543226"></p><p>于是直接初始化容量为16，门限值为0.75*16 &#x3D; 12</p><h4 id="达到门限值需要扩容"><a href="#达到门限值需要扩容" class="headerlink" title="达到门限值需要扩容"></a>达到门限值需要扩容</h4><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220819135919766.png" alt="image-20220819135919766"></p><ul><li>如果原来的桶数组大小已经超过最大限定容量(1 &lt;&lt; 30)了，那么将门限值设定为Integer数据类型的最大值（1 &lt;&lt; 31）</li><li>否则，就直接按照2次幂扩展规则，将桶数组容量和门限值都扩大为原先的2倍</li></ul><p>接着，不可避免的，需要rehash</p><p>大概结构如下：遍历每个节点，进行调整</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">if</span> ((e = oldTab[j]) != <span class="literal">null</span>) &#123;</span><br><span class="line">        oldTab[j] = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (e.next == <span class="literal">null</span>)</span><br><span class="line">            newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            ((TreeNode&lt;K,V&gt;)e).split(<span class="built_in">this</span>, newTab, j, oldCap);</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">            Node&lt;K,V&gt; loHead = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">// 一系列操作</span></span><br><span class="line">           ......</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="数组的调整"><a href="#数组的调整" class="headerlink" title="数组的调整"></a>数组的调整</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((e = oldTab[j]) != <span class="literal">null</span>) &#123;</span><br><span class="line">    oldTab[j] = <span class="literal">null</span>;  <span class="comment">// 这一步将原数组对应位置的节点设为NULL</span></span><br><span class="line">    <span class="keyword">if</span> (e.next == <span class="literal">null</span>)  <span class="comment">// 如果该节点的下一个为空，则说明此处既不是链表，也不是红黑树，直接进行哈希再分配</span></span><br><span class="line">        newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">  ......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="链表的调整"><a href="#链表的调整" class="headerlink" title="链表的调整"></a>链表的调整</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((e = oldTab[j]) != <span class="literal">null</span>) &#123;</span><br><span class="line">    oldTab[j] = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 单个节点</span></span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">// 红黑树</span></span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">// 链表</span></span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">        Node&lt;K,V&gt; loHead = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">        Node&lt;K,V&gt; hiHead = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            next = e.next;</span><br><span class="line">            <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (loTail == <span class="literal">null</span>)</span><br><span class="line">                    loHead = e;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    loTail.next = e;</span><br><span class="line">                loTail = e;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (hiTail == <span class="literal">null</span>)</span><br><span class="line">                    hiHead = e;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    hiTail.next = e;</span><br><span class="line">                hiTail = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> ((e = next) != <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (loTail != <span class="literal">null</span>) &#123;</span><br><span class="line">            loTail.next = <span class="literal">null</span>;</span><br><span class="line">            newTab[j] = loHead;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (hiTail != <span class="literal">null</span>) &#123;</span><br><span class="line">            hiTail.next = <span class="literal">null</span>;</span><br><span class="line">            newTab[j + oldCap] = hiHead;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>乍一看很复杂，是的。</p><p>首先，要明白高低位链表是什么：</p><p>将每个节点HASH值与oldCap按位与，如果为0，则加入低位链表，如果高位为1，则加入高位链表</p><p>为什么会这样呢，举个例子，oldCap为16</p><p>若7(00111) &amp; 16(10000) &#x3D;&gt; 00000 则加入低位链表</p><p>若17(10001) &amp; 16(10000) &#x3D;&gt; 10000 则加入高位链表</p><p>下面看看怎么通过循环构建两根链表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    next = e.next;</span><br><span class="line">    <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (loTail == <span class="literal">null</span>)</span><br><span class="line">            loHead = e;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            loTail.next = e;</span><br><span class="line">        loTail = e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (hiTail == <span class="literal">null</span>)</span><br><span class="line">            hiHead = e;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            hiTail.next = e;</span><br><span class="line">        hiTail = e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">while</span> ((e = next) != <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>将<code>loHead</code> <code>loTail</code>分别指向低位链表的头尾节点</p><p>将<code>hiHead</code> <code>hiTail</code>分别指向高位链表的头尾节点</p><p>接着将两条链表加入新的桶数组中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (loTail != <span class="literal">null</span>) &#123;</span><br><span class="line">    loTail.next = <span class="literal">null</span>;</span><br><span class="line">    newTab[j] = loHead;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (hiTail != <span class="literal">null</span>) &#123;</span><br><span class="line">    hiTail.next = <span class="literal">null</span>;</span><br><span class="line">    newTab[j + oldCap] = hiHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，借互联网上的一张图来帮助理解</p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220819144720573.png" alt="image-20220819144720573"></p><h5 id="红黑树的调整"><a href="#红黑树的调整" class="headerlink" title="红黑树的调整"></a>红黑树的调整</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((e = oldTab[j]) != <span class="literal">null</span>) &#123;</span><br><span class="line">    oldTab[j] = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 单节点</span></span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">// 红黑树</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">        ((TreeNode&lt;K,V&gt;)e).split(<span class="built_in">this</span>, newTab, j, oldCap);</span><br><span class="line">   <span class="comment">// 链表</span></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中split函数细节为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">split</span><span class="params">(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab, <span class="type">int</span> index, <span class="type">int</span> bit)</span> &#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; b = <span class="built_in">this</span>;</span><br><span class="line">    <span class="comment">// Relink into lo and hi lists, preserving order</span></span><br><span class="line">    TreeNode&lt;K,V&gt; loHead = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">    TreeNode&lt;K,V&gt; hiHead = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lc</span> <span class="operator">=</span> <span class="number">0</span>, hc = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; e = b, next; e != <span class="literal">null</span>; e = next) &#123;</span><br><span class="line">        next = (TreeNode&lt;K,V&gt;)e.next;</span><br><span class="line">        e.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> ((e.hash &amp; bit) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((e.prev = loTail) == <span class="literal">null</span>)</span><br><span class="line">                loHead = e;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                loTail.next = e;</span><br><span class="line">            loTail = e;</span><br><span class="line">            ++lc;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ((e.prev = hiTail) == <span class="literal">null</span>)</span><br><span class="line">                hiHead = e;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                hiTail.next = e;</span><br><span class="line">            hiTail = e;</span><br><span class="line">            ++hc;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (loHead != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (lc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class="line">            tab[index] = loHead.untreeify(map);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            tab[index] = loHead;</span><br><span class="line">            <span class="keyword">if</span> (hiHead != <span class="literal">null</span>) <span class="comment">// (else is already treeified)</span></span><br><span class="line">                loHead.treeify(tab);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (hiHead != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class="line">            tab[index + bit] = hiHead.untreeify(map);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            tab[index + bit] = hiHead;</span><br><span class="line">            <span class="keyword">if</span> (loHead != <span class="literal">null</span>)</span><br><span class="line">                hiHead.treeify(tab);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看起来有些复杂，其实和链表一样的。根据HASH将红黑树分出高低位链表来。再将两条链表树化塞入新的桶数组中。其中，有很多细节和特殊情况，暂不做讨论。关于红黑树的理论和实现，这里也不再详细赘述。</p><p>这样，对于HashMap是如何进行扩容的，我们有了一个基本的认识</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;认识HashMap&quot;&gt;&lt;a href=&quot;#认识HashMap&quot; class=&quot;headerlink&quot; title=&quot;认识HashMap&quot;&gt;&lt;/a&gt;认识HashMap&lt;/h2&gt;&lt;p&gt;HashMap是平时开发中常用一种数据结构。其底层精妙的设计大大提高了我们开发出来的</summary>
      
    
    
    
    <category term="面试" scheme="https://cheung0-bit.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="Java" scheme="https://cheung0-bit.github.io/categories/%E9%9D%A2%E8%AF%95/Java/"/>
    
    
    <category term="数据结构与算法" scheme="https://cheung0-bit.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="Java" scheme="https://cheung0-bit.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>红黑树</title>
    <link href="https://cheung0-bit.github.io/7cb8dc2a6878/"/>
    <id>https://cheung0-bit.github.io/7cb8dc2a6878/</id>
    <published>2022-08-19T13:30:39.000Z</published>
    <updated>2022-11-25T07:06:36.028Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在AVL中提到了，当插入和删除频率较高时，我们选择红黑树来降低因不断的维护平衡带来的时间损耗。在诸多地方（比如JDK1.8的HashMap……）得到了广泛的应用。那么，什么是红黑树，为什么就这么牛逼？我们一起来解开其神秘的面纱~</p><h2 id="什么是红黑树"><a href="#什么是红黑树" class="headerlink" title="什么是红黑树"></a>什么是红黑树</h2><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/Red-black_tree_example.svg.png"></p><blockquote><p>红黑树是一种特定类型的<a href="https://baike.baidu.com/item/%E4%BA%8C%E5%8F%89%E6%A0%91">二叉树</a>，它是在计算机科学中用来组织数据比如数字的块的一种结构。 [4] </p><p>红黑树是一种平衡二叉查找树的变体，它的左右子树高差有可能大于 1，所以红黑树不是严格意义上的<a href="https://baike.baidu.com/item/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/10421057">平衡二叉树</a>（AVL），但 对之进行平衡的代价较低， 其平均统计性能要强于 AVL 。 [2] </p><p>由于每一棵红黑树都是一颗<a href="https://baike.baidu.com/item/%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/10905079">二叉排序树</a>，因此，在对红黑树进行查找时，可以采用运用于普通二叉排序树上的查找算法，在查找过程中不需要颜色信息。</p></blockquote><p>以上是百度百科的介绍。我简单总结就是</p><ul><li>一种二叉树</li><li>具备平衡效果</li><li>由红黑两种颜色的节点组成</li><li>增删改差性能很强👍</li></ul><p>那为什么叫红黑树呢，难道红色和黑色有什么魔力吗？是这样的，红黑树的发明者鲁道夫·贝尔非常喜欢红色和黑色~</p><h2 id="红黑树的性质"><a href="#红黑树的性质" class="headerlink" title="红黑树的性质"></a>红黑树的性质</h2><ul><li>性质1：每个节点非黑即红</li><li>性质2：根节点是黑色</li><li>性质3：每个叶子节点（NULL）是黑色</li><li>性质4：每个红色节点的两个子节点一定都是黑色。也就是说不存在两个红色节点相连</li><li>性质5：任意节点到每个叶子节点的路径都包含相同数量的黑节点，也就是所谓的黑色完美平衡<ul><li>性质5.1：可能推导出如果一个节点拥有一个黑色节点，那么该节点肯定有两个子节点</li></ul></li></ul><blockquote><p>啊！条条框框的好多呀！</p></blockquote><p>不要被这么多性质吓到，先思考一个问题，红黑树到底是怎么产生的，为什么刚好用两种颜色来描述节点，不能是三种？难道因为我们都是玩二进制的男人吗？</p><p>首先，我们要了解另一种树：2-3树（念二三树）</p><h2 id="先说一说2-3树"><a href="#先说一说2-3树" class="headerlink" title="先说一说2-3树"></a>先说一说2-3树</h2><p>2-3树不是一种严格由一个节点只有一个数据域的节点构成的树，其存在2叉节点和3叉节点</p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220725162751893.png" alt="image-20220725162751893"></p><p>其中，只有一个数据域的就是2叉节点：左叉指向小与该节点数据域的节点，右叉则是相反的情况</p><p>有两个数据域的就是3叉节点，左指向小于该节点中较小数的节点，中间是介于该节点两个数据域的节点，右边则大于较大者的节点</p><p>来看一下1-7是如何构建一颗2-3树的过程体会一下：</p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220725163525671.png" alt="image-20220725163525671"></p><p>可以看到只要在建树的过程中满足2-3树的限制，就可以保证这棵树保证一定的平衡度。</p><p>2-3树跟红黑树之间就像是在面向对象编程过程中接口跟具体实现类的关系，红黑树就是针对2-3树的一种实现</p><p>2-3树的概念十分模糊，虽然我们通过示意图可以很简单的体会到2-3树想要表达的意思，但是编程就相当的难实现。于是就有智者创建了红黑树，通过红与黑两种颜色在创建树的过程中加以约束，以满足2-3树的性质</p><h2 id="2-3树与红黑树的比对"><a href="#2-3树与红黑树的比对" class="headerlink" title="2-3树与红黑树的比对"></a>2-3树与红黑树的比对</h2><p>那么，2-3树跟红黑树有什么联系，我们来看看2-3树与红黑树之间是怎么转化的：</p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220725165737960.png" alt="image-20220725165737960"></p><p>我个人的理解（仅提供一个看待红黑树的角度）：</p><ul><li>红色节点可看作是黑色父节点的附庸，是一种辅助的展示手段。因为红色节点会合成到黑色节点中成为2-3树中的3叉节点</li><li>也因此，不可能有两个相连的红色节点，否则无法还原成一个3叉节点。这样就解释了性质4</li><li>当一颗红黑树还原成2-3树时，就是一颗”完美二叉树“！（肥肥胖胖，完美稳定） 此时也就是江湖上说的<strong>黑色平衡</strong>。此时也理所当然满足了性质5任意节点到每个叶子节点的路径都包含相同数量的黑节点</li><li>当满足所有条件性质时，最长的一条路径就不会超过最短的一条路径的2倍。使得查找的时间复杂最坏不会超过O(2logN)</li></ul><h2 id="红黑树插入节点的分类讨论"><a href="#红黑树插入节点的分类讨论" class="headerlink" title="红黑树插入节点的分类讨论"></a>红黑树插入节点的分类讨论</h2><h3 id="三种基本操作"><a href="#三种基本操作" class="headerlink" title="三种基本操作"></a>三种基本操作</h3><ul><li><p>变色</p><ul><li>顾名思义，红-黑的颜色转换</li></ul></li><li><p>左旋</p><ul><li>对应AVL中的概念，为达到黑色平衡所做的操作</li><li>示例代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">leftRotate</span><span class="params">(RbNode&lt;T&gt; x)</span> &#123;</span><br><span class="line">    RbNode&lt;T&gt; y = x.rightChild;</span><br><span class="line">    x.rightChild = y.leftChild;</span><br><span class="line">    <span class="comment">// 若左孩子不为空，应完善该节点的父亲指针指向</span></span><br><span class="line">    <span class="keyword">if</span> (y.leftChild != <span class="literal">null</span>) &#123;</span><br><span class="line">        y.leftChild.parent = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 交换父亲域</span></span><br><span class="line">    y.parent = x.parent;</span><br><span class="line">    <span class="keyword">if</span> (x.parent != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 寻找正确的子节点指向</span></span><br><span class="line">        <span class="keyword">if</span> (x.parent.leftChild == x) &#123;</span><br><span class="line">            x.parent.leftChild = y;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            x.parent.rightChild = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.root = y;</span><br><span class="line">    &#125;</span><br><span class="line">    y.leftChild = x;</span><br><span class="line">    x.parent = y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>右旋</p><ul><li>对应AVL中的概念，为达到黑色平衡所做的操作</li><li>示例代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rightRotate</span><span class="params">(RbNode&lt;T&gt; x)</span> &#123;</span><br><span class="line">    RbNode&lt;T&gt; y = x.leftChild;</span><br><span class="line">    x.leftChild = y.rightChild;</span><br><span class="line">    <span class="comment">// 若右孩子不为空，应完善该节点的父亲指针指向</span></span><br><span class="line">    <span class="keyword">if</span> (y.rightChild != <span class="literal">null</span>) &#123;</span><br><span class="line">        y.rightChild.parent = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 交换父亲域</span></span><br><span class="line">    y.parent = x.parent;</span><br><span class="line">    <span class="keyword">if</span> (x.parent != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 寻找正确的子节点指向</span></span><br><span class="line">        <span class="keyword">if</span> (x.parent.leftChild == x) &#123;</span><br><span class="line">            x.parent.leftChild = y;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            x.parent.rightChild = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.root = y;</span><br><span class="line">    &#125;</span><br><span class="line">    y.rightChild = x;</span><br><span class="line">    x.parent = y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>红黑树的构建并不复杂，只要将所有可能出现的情况讨论到位，代码按部就班的写就行了</strong></p><h3 id="情况1"><a href="#情况1" class="headerlink" title="情况1"></a>情况1</h3><p>为空树，不废话直接插入。但注意根节点为黑色</p><h3 id="情况2"><a href="#情况2" class="headerlink" title="情况2"></a>情况2</h3><p>插入的Key已经存在。搜索到对应的节点，更新数据值</p><h3 id="情况3"><a href="#情况3" class="headerlink" title="情况3"></a>情况3</h3><p>插入的节点的父节点为黑节点，那么直接上红色节点，不会破坏黑色平衡</p><h3 id="情况4"><a href="#情况4" class="headerlink" title="情况4"></a>情况4</h3><p>父亲节点为红色，讨论叔叔节点的颜色</p><ul><li><p>情况4.1</p><ul><li><p>叔叔节点存在且为红色节点</p></li><li><p>处理方案</p><ul><li>父辈节点变为黑色</li><li>爷爷节点变为红色</li><li>将爷爷节点设为当前节点，进行后续操作</li></ul><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220725174927748.png" alt="image-20220725174927748"></p></li></ul></li><li><p>情况4.2</p><p>叔叔节点不存在或为空</p><ul><li><p>4.2.1</p><ul><li>新插入的节点为父亲的左孩子</li><li>先变色，后右旋</li></ul><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220725175039510.png" alt="image-20220725175039510"></p></li><li><p>4.2.2</p><ul><li>新插入的节点为父亲的右孩子</li><li>先左旋，再变色，后右旋</li></ul><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220725175758098.png" alt="image-20220725175758098"></p></li></ul></li><li><p>4.3</p></li></ul><p>​4.2情况的对称操作</p><p>代码示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">insertFixUp</span><span class="params">(RbNode&lt;T&gt; node)</span> &#123;</span><br><span class="line">    RbNode&lt;T&gt; parent, grandParent, uncle;</span><br><span class="line">    <span class="comment">//父结点不是根，且为红色，才进行修复</span></span><br><span class="line">    <span class="keyword">while</span> ((parent = node.parent) != <span class="literal">null</span> &amp;&amp; parent.color == RED) &#123;</span><br><span class="line">        grandParent = parent.parent;</span><br><span class="line">        <span class="keyword">if</span> (parent == grandParent.leftChild) &#123;</span><br><span class="line">            <span class="comment">//叔叔为红色 对应4.1情况 直接变色</span></span><br><span class="line">            <span class="keyword">if</span> ((uncle = grandParent.rightChild) != <span class="literal">null</span> &amp;&amp; uncle.color == RED) &#123;</span><br><span class="line">                parent.color = BLACK;</span><br><span class="line">                uncle.color = BLACK;</span><br><span class="line">                grandParent.color = RED;</span><br><span class="line">                node = grandParent;</span><br><span class="line">                <span class="comment">// 将祖父当成新插入结点继续修复, 知道黑色完美平衡</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 对应 4.2.2 情况 先进行旋转操作 转化为 4.2.1 情况</span></span><br><span class="line">            <span class="keyword">if</span> (parent.rightChild == node) &#123;</span><br><span class="line">                leftRotate(parent);</span><br><span class="line">                <span class="comment">// 旋转后node和parent的指向关系已经发生了变化</span></span><br><span class="line">                <span class="comment">// 但恢复到情况4.2.1 需要重新调整node和parent的实际关系</span></span><br><span class="line">                <span class="comment">// 因此调换两个指针的指向</span></span><br><span class="line">                RbNode&lt;T&gt; tmp = parent;</span><br><span class="line">                parent = node;</span><br><span class="line">                node = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 对应 4.2.1 情况 先变色 后旋转</span></span><br><span class="line">            parent.color = BLACK;</span><br><span class="line">            grandParent.color = RED;</span><br><span class="line">            rightRotate(grandParent);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//对称操作 就不多废话了</span></span><br><span class="line">            <span class="keyword">if</span> ((uncle = grandParent.leftChild) != <span class="literal">null</span> &amp;&amp; uncle.color == RED) &#123;</span><br><span class="line">                parent.color = BLACK;</span><br><span class="line">                uncle.color = BLACK;</span><br><span class="line">                grandParent.color = RED;</span><br><span class="line">                node = grandParent;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (parent.leftChild == node) &#123;</span><br><span class="line">                rightRotate(parent);</span><br><span class="line">                RbNode&lt;T&gt; tmp = parent;</span><br><span class="line">                parent = node;</span><br><span class="line">                node = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            parent.color = BLACK;</span><br><span class="line">            grandParent.color = RED;</span><br><span class="line">            leftRotate(grandParent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.root.color = BLACK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，红黑树节点类代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RbNode</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;T&gt;&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 节点颜色</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> color;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 节点键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> T key;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 左孩子指针</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> RbNode&lt;T&gt; leftChild;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 右孩子指针</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> RbNode&lt;T&gt; rightChild;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 父结点指针，红黑树经常涉及到兄弟，叔叔，侄子，有个父结点指针方便操作。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> RbNode&lt;T&gt; parent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RbNode</span><span class="params">(<span class="type">boolean</span> color, T key)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(color, key, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RbNode</span><span class="params">(<span class="type">boolean</span> color, T key, RbNode&lt;T&gt; leftChild, RbNode&lt;T&gt; rightChild, RbNode&lt;T&gt; parent)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">        <span class="built_in">this</span>.leftChild = leftChild;</span><br><span class="line">        <span class="built_in">this</span>.rightChild = rightChild;</span><br><span class="line">        <span class="built_in">this</span>.parent = parent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="引入展示工具类"><a href="#引入展示工具类" class="headerlink" title="引入展示工具类"></a>引入展示工具类</h2><p>从网上借鉴了一个工具类，可以形象的展示一颗红黑树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeOperation</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">    树的结构示例：</span></span><br><span class="line"><span class="comment">              1</span></span><br><span class="line"><span class="comment">            /   \</span></span><br><span class="line"><span class="comment">          2       3</span></span><br><span class="line"><span class="comment">         / \     / \</span></span><br><span class="line"><span class="comment">        4   5   6   7</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于获得树的层数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getTreeDepth</span><span class="params">(RbNode&lt;?&gt; root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root == <span class="literal">null</span> ? <span class="number">0</span> : (<span class="number">1</span> + Math.max(getTreeDepth(root.leftChild), getTreeDepth(root.rightChild)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeArray</span><span class="params">(RbNode&lt;?&gt; currNode, <span class="type">int</span> rowIndex, <span class="type">int</span> columnIndex, String[][] res, <span class="type">int</span> treeDepth)</span> &#123;</span><br><span class="line">        <span class="comment">// 保证输入的树不为空</span></span><br><span class="line">        <span class="keyword">if</span> (currNode == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 先将当前节点保存到二维数组中</span></span><br><span class="line">        res[rowIndex][columnIndex] = String.format(<span class="string">&quot;%s-%s &quot;</span>, currNode.key, <span class="string">&quot;true&quot;</span>.equals(String.valueOf(currNode.color)) ? <span class="string">&quot;R&quot;</span> : <span class="string">&quot;B&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算当前位于树的第几层</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">currLevel</span> <span class="operator">=</span> ((rowIndex + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 若到了最后一层，则返回</span></span><br><span class="line">        <span class="keyword">if</span> (currLevel == treeDepth) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 计算当前行到下一行，每个元素之间的间隔（下一行的列索引与当前元素的列索引之间的间隔）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">gap</span> <span class="operator">=</span> treeDepth - currLevel - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对左儿子进行判断，若有左儿子，则记录相应的&quot;/&quot;与左儿子的值</span></span><br><span class="line">        <span class="keyword">if</span> (currNode.leftChild != <span class="literal">null</span>) &#123;</span><br><span class="line">            res[rowIndex + <span class="number">1</span>][columnIndex - gap] = <span class="string">&quot;/&quot;</span>;</span><br><span class="line">            writeArray(currNode.leftChild, rowIndex + <span class="number">2</span>, columnIndex - gap * <span class="number">2</span>, res, treeDepth);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对右儿子进行判断，若有右儿子，则记录相应的&quot;\&quot;与右儿子的值</span></span><br><span class="line">        <span class="keyword">if</span> (currNode.rightChild != <span class="literal">null</span>) &#123;</span><br><span class="line">            res[rowIndex + <span class="number">1</span>][columnIndex + gap] = <span class="string">&quot;\\&quot;</span>;</span><br><span class="line">            writeArray(currNode.rightChild, rowIndex + <span class="number">2</span>, columnIndex + gap * <span class="number">2</span>, res, treeDepth);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(RbNode&lt;?&gt; root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;EMPTY!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 得到树的深度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">treeDepth</span> <span class="operator">=</span> getTreeDepth(root);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最后一行的宽度为2的（n - 1）次方乘3，再加1</span></span><br><span class="line">        <span class="comment">// 作为整个二维数组的宽度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">arrayHeight</span> <span class="operator">=</span> treeDepth * <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">arrayWidth</span> <span class="operator">=</span> (<span class="number">2</span> &lt;&lt; (treeDepth - <span class="number">2</span>)) * <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 用一个字符串数组来存储每个位置应显示的元素</span></span><br><span class="line">        String[][] res = <span class="keyword">new</span> <span class="title class_">String</span>[arrayHeight][arrayWidth];</span><br><span class="line">        <span class="comment">// 对数组进行初始化，默认为一个空格</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrayHeight; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arrayWidth; j++) &#123;</span><br><span class="line">                res[i][j] = <span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从根节点开始，递归处理整个树</span></span><br><span class="line">        <span class="comment">// res[0][(arrayWidth + 1)/ 2] = (char)(root.val + &#x27;0&#x27;);</span></span><br><span class="line">        writeArray(root, <span class="number">0</span>, arrayWidth / <span class="number">2</span>, res, treeDepth);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 此时，已经将所有需要显示的元素储存到了二维数组中，将其拼接并打印即可</span></span><br><span class="line">        <span class="keyword">for</span> (String[] line : res) &#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; line.length; i++) &#123;</span><br><span class="line">                sb.append(line[i]);</span><br><span class="line">                <span class="keyword">if</span> (line[i].length() &gt; <span class="number">1</span> &amp;&amp; i &lt;= line.length - <span class="number">1</span>) &#123;</span><br><span class="line">                    i += line[i].length() &gt; <span class="number">4</span> ? <span class="number">2</span> : line[i].length() - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(sb.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试与总结"><a href="#测试与总结" class="headerlink" title="测试与总结"></a>测试与总结</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer[] arrays = <span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">19</span>, <span class="number">18</span>, <span class="number">30</span>, <span class="number">33</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createRbTree</span><span class="params">()</span> &#123;</span><br><span class="line">    RbTree&lt;Integer&gt; rbTree = <span class="keyword">new</span> <span class="title class_">RbTree</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Integer key : arrays) &#123;</span><br><span class="line">        rbTree.createTree(key);</span><br><span class="line">    &#125;</span><br><span class="line">    TreeOperation.show(rbTree.root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">          8-B          </span><br><span class="line">       /     \         </span><br><span class="line">    5-R         18-R     </span><br><span class="line">  /   \       /   \    </span><br><span class="line">3-B     7-B 15-B      30-B </span><br><span class="line">                   / \ </span><br><span class="line">                  19-R  33-R </span><br></pre></td></tr></table></figure><p>关于红黑树节点的删除面临的情况较多，比插入要复杂的多，这里就不再进行讨论了。本质也是讨论出所有的情况，将每种情况写出对应的操作代码，再组装起来，就可以了，只不过复杂度很高，也相当烧脑。能够牢固的把握和理解红黑树的构建过程和与2-3树的转化的概念，就不错啦！</p><p>相关代码可以在 <a href="https://link.juejin.cn/?target=https://github.com/Cheung0-bit/tree-practice">github.com&#x2F;Cheung0-bit…</a> 中找到</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在AVL中提到了，当插入和删除频率较高时，我们选择红黑树来降低因不断的维护平衡带来的时间损耗。在诸多地方（比如JDK1.8的HashMap…</summary>
      
    
    
    
    <category term="面试" scheme="https://cheung0-bit.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="数据结构与算法" scheme="https://cheung0-bit.github.io/categories/%E9%9D%A2%E8%AF%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数据结构与算法" scheme="https://cheung0-bit.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>平衡树</title>
    <link href="https://cheung0-bit.github.io/653e80a82c4f/"/>
    <id>https://cheung0-bit.github.io/653e80a82c4f/</id>
    <published>2022-08-19T13:21:00.000Z</published>
    <updated>2022-11-25T07:06:49.533Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>为解决二叉搜索树退化成一张链表的情况，改进出了AVL（取名与作者<code>G.M.Adelson-Velsky</code>和<code>E.M.Landis</code>）</p><p>一颗AVL具备的条件：</p><ul><li>必须是一颗BST</li><li>每个节点的左右子树高度至多相差1</li></ul><p>AVL树的查找、插入、删除等操作在平均和最坏的情况下都是O(logN)，得益于其一直在动态的维护平衡性</p><h2 id="相关参数"><a href="#相关参数" class="headerlink" title="相关参数"></a>相关参数</h2><ul><li><p>平衡因子</p><p>左子树高度减去右子树高度的值称为该节点的平衡因子BF(Balance Factor)。若BF的绝对值大于1，则表明需要进行调整</p></li><li><p>最小不平衡子树</p><p>距离插入节点最近的，且平衡因子的绝对值大于1的节点为根的子树</p></li></ul><h2 id="调整方式"><a href="#调整方式" class="headerlink" title="调整方式"></a>调整方式</h2><ul><li><p>LL型</p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220723165252254.png" alt="image-20220723165252254"></p></li><li><p>RR型</p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220723165416390.png" alt="image-20220723165416390"></p></li><li><p>LR型</p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220723165429874.png" alt="image-20220723165429874"></p></li><li><p>RL型</p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220723165447301.png" alt="image-20220723165447301"></p></li></ul><p>其中LL和RR型就可以看成将中间的节点”拎起来“</p><p>LR和RL型就先将拐出来的部分旋转为LL和RR型，再进行对应的操作</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="LL型平衡"><a href="#LL型平衡" class="headerlink" title="LL型平衡"></a>LL型平衡</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Node&lt;T&gt; <span class="title function_">llRotate</span><span class="params">(Node&lt;T&gt; avlNode)</span> &#123;</span><br><span class="line">        Node&lt;T&gt; node = avlNode.leftChild;</span><br><span class="line">        avlNode.leftChild = node.rightChild;</span><br><span class="line">        node.rightChild = avlNode;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RR型平衡"><a href="#RR型平衡" class="headerlink" title="RR型平衡"></a>RR型平衡</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Node&lt;T&gt; <span class="title function_">rrRotate</span><span class="params">(Node&lt;T&gt; avlNode)</span> &#123;</span><br><span class="line">        Node&lt;T&gt; node = avlNode.rightChild;</span><br><span class="line">        avlNode.rightChild = node.leftChild;</span><br><span class="line">        node.leftChild = avlNode;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LR型平衡"><a href="#LR型平衡" class="headerlink" title="LR型平衡"></a>LR型平衡</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Node&lt;T&gt; <span class="title function_">lrRotate</span><span class="params">(Node&lt;T&gt; avlNode)</span> &#123;</span><br><span class="line">        avlNode.leftChild = rrRotate(avlNode.leftChild);</span><br><span class="line">        <span class="keyword">return</span> llRotate(avlNode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RL型平衡"><a href="#RL型平衡" class="headerlink" title="RL型平衡"></a>RL型平衡</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Node&lt;T&gt; <span class="title function_">rlRotate</span><span class="params">(Node&lt;T&gt; avlNode)</span> &#123;</span><br><span class="line">        avlNode.rightChild = llRotate(avlNode.rightChild);</span><br><span class="line">        <span class="keyword">return</span> rrRotate(avlNode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="平衡实现逻辑"><a href="#平衡实现逻辑" class="headerlink" title="平衡实现逻辑"></a>平衡实现逻辑</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Node&lt;T&gt; <span class="title function_">balance</span><span class="params">(Node&lt;T&gt; node)</span> &#123;</span><br><span class="line">    <span class="comment">// 左子树比右子树高度大于1以上</span></span><br><span class="line">    <span class="keyword">if</span> (getAvlTreeHeight(node.leftChild) - getAvlTreeHeight(node.rightChild) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (getAvlTreeHeight(node.leftChild.leftChild) &gt;= getAvlTreeHeight(node.leftChild.rightChild)) &#123;</span><br><span class="line">            <span class="comment">// 执行LL型调整</span></span><br><span class="line">            node = llRotate(node);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 执行LR型调整</span></span><br><span class="line">            node = lrRotate(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getAvlTreeHeight(node.rightChild) - getAvlTreeHeight(node.leftChild) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (getAvlTreeHeight(node.rightChild.rightChild) &gt;= getAvlTreeHeight(node.rightChild.leftChild)) &#123;</span><br><span class="line">            <span class="comment">// 执行RR型调整</span></span><br><span class="line">            node = rrRotate(node);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 执行RL型调整</span></span><br><span class="line">            node = rlRotate(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="建立AVL逻辑"><a href="#建立AVL逻辑" class="headerlink" title="建立AVL逻辑"></a>建立AVL逻辑</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createTree</span><span class="params">(T data)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (data == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    root = insert(root, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Node&lt;T&gt; <span class="title function_">insert</span><span class="params">(Node&lt;T&gt; root, T data)</span> &#123;</span><br><span class="line">    <span class="comment">// 根节点为空，说明树为空，则创建一颗树</span></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(data);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (compare(root, data) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            root.leftChild = insert(root.leftChild, data);</span><br><span class="line">            root = balance(root);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (compare(root, data) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            root.rightChild = insert(root.rightChild, data);</span><br><span class="line">            root = balance(root);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer[] arrays = <span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">26</span>, <span class="number">21</span>, <span class="number">30</span>, <span class="number">50</span>, <span class="number">60</span>, <span class="number">66</span>, <span class="number">68</span>, <span class="number">70</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createAvlTree</span><span class="params">()</span> &#123;</span><br><span class="line">    AvlTree&lt;Integer&gt; avlTree = <span class="keyword">new</span> <span class="title class_">AvlTree</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Integer data : arrays) &#123;</span><br><span class="line">        avlTree.createTree(data);</span><br><span class="line">    &#125;</span><br><span class="line">    avlTree.printTree();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">前序遍历： 26 21 66 50 30 60 68 70 </span><br><span class="line">中序遍历： 21 26 30 50 60 66 68 70 </span><br><span class="line">后序遍历： 21 30 60 50 70 68 66 26 </span><br></pre></td></tr></table></figure><h2 id="代价分析"><a href="#代价分析" class="headerlink" title="代价分析"></a>代价分析</h2><ul><li>查找：效率很好，平均情况和最坏情况都是O(logN)</li><li>插入：每插入一个节点至多需要旋一次旋转。总体时间复杂度为O(logN)</li><li>删除：每一次删除最多需要O(logN)次旋转，复杂度为O(logN)</li></ul><p>AVL树的结构相当的稳定，故查询效率相当的高。但每次插入或删除节点时都会进行动态的维护平衡，带来了不小i的时间成本。所以当查询和删除频率不高时，采用AVL树可以带来极高的查询效率。但当插入和删除频率较高时，AVL的性能并不理想，此时，我们选择采用红黑树</p><p>相关代码可以在 <a href="https://github.com/Cheung0-bit/tree-practice">https://github.com/Cheung0-bit/tree-practice</a> 中找到</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;为解决二叉搜索树退化成一张链表的情况，改进出了AVL（取名与作者&lt;code&gt;G.M.Adelson-Velsky&lt;/code&gt;和&lt;code&gt;</summary>
      
    
    
    
    <category term="面试" scheme="https://cheung0-bit.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="数据结构与算法" scheme="https://cheung0-bit.github.io/categories/%E9%9D%A2%E8%AF%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数据结构与算法" scheme="https://cheung0-bit.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>二叉搜索树</title>
    <link href="https://cheung0-bit.github.io/ab96bd0fdf5d/"/>
    <id>https://cheung0-bit.github.io/ab96bd0fdf5d/</id>
    <published>2022-08-19T13:20:31.000Z</published>
    <updated>2022-11-25T07:07:02.607Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>树是数据结构中必学的一种数据结构。在实际应用中，常见的树结构有二叉搜索树、B树、B+树、AVL树、红黑树、字典树等。<br>对应的用途列举如下：</p><ul><li>B&#x2F;B+树：主要用于文件系统以及数据库中做索引</li><li>AVL树：平衡二叉树，windows对进程地址空间的管理用到了AVL</li><li>红黑树：平衡二叉树的一种改进，广泛的应用在C++STL中，如map、set，以及JDK中的HashMap、TreeMap等</li><li>Trie（字典树）：又经常叫做前缀树，主要用于字符串检索、文本预测、词频统计等</li></ul><h2 id="二叉搜索树（BST-Binary-Search-Tree）"><a href="#二叉搜索树（BST-Binary-Search-Tree）" class="headerlink" title="二叉搜索树（BST Binary Search Tree）"></a>二叉搜索树（BST Binary Search Tree）</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>二叉搜索树也叫做二叉排序树，二叉搜索树采用二分思维将数据按照规则组装在一个树形结构中，大大提高了数据检索的效率。对于一颗普通的二叉树进行中序遍历，即可获取一个有序的数序列</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>非空左子树的所有键值小于根节点的值</li><li>非空右子树的所有键值大于根节点的值</li><li>左右子树都是二叉搜索树</li></ul><h3 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h3><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220723142156081.png" alt="image-20220723142156081"></p><p>从图中可见，在改变一串数列组内顺序后，会得到不同的二叉搜索树。最好的情况下，搜索数据的时间复杂度为O(logN)，最坏的情况下，该树会退化为线性表，导致时间复杂度变为O(N)，因此，在二叉搜索树的基础上，又衍生出了AVL树和红黑树。后者基于二叉搜索树，做出了更多的限制。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>首先，我们需要构建一颗二叉树。首当其冲，我们顶一个数的节点类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;T&gt;&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据域</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 节点子树的高度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> height;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 左孩子</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Node&lt;T&gt; leftChild;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 右孩子</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Node&lt;T&gt; rightChild;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(data, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(T data, Node&lt;T&gt; leftChild, Node&lt;T&gt; rightChild)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.leftChild = leftChild;</span><br><span class="line">        <span class="built_in">this</span>.rightChild = rightChild;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>data字段由于不限定传入的对象类型，在这里使用泛型可以很好的规范</p><h4 id="构建二叉树"><a href="#构建二叉树" class="headerlink" title="构建二叉树"></a>构建二叉树</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BsTree</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;T&gt;&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node&lt;T&gt; root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createTree</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (data == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        root = insert(root, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node&lt;T&gt; <span class="title function_">insert</span><span class="params">(Node&lt;T&gt; root, T data)</span> &#123;</span><br><span class="line">        <span class="comment">// 根节点为空，说明树为空，则创建一颗树</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(data);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (compare(root, data) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                root.leftChild = insert(root.leftChild, data);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (compare(root, data) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                root.rightChild = insert(root.rightChild, data);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T <span class="title function_">getMin</span><span class="params">(Node&lt;T&gt; root)</span> &#123;</span><br><span class="line">        Node&lt;T&gt; temp = root;</span><br><span class="line">        <span class="keyword">while</span> (temp.leftChild != <span class="literal">null</span>) &#123;</span><br><span class="line">            temp = temp.leftChild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp.data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T <span class="title function_">getMax</span><span class="params">(Node&lt;T&gt; root)</span> &#123;</span><br><span class="line">        Node&lt;T&gt; temp = root;</span><br><span class="line">        <span class="keyword">while</span> (temp.rightChild != <span class="literal">null</span>) &#123;</span><br><span class="line">            temp = temp.rightChild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp.data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Node&lt;T&gt; root, T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root.data.compareTo(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printTree</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;前序遍历： &quot;</span>);</span><br><span class="line">        preOrder(root);</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.print(<span class="string">&quot;中序遍历： &quot;</span>);</span><br><span class="line">        inOrder(root);</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.print(<span class="string">&quot;后序遍历： &quot;</span>);</span><br><span class="line">        postOrder(root);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">(Node&lt;T&gt; root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.print(root.data);</span><br><span class="line">            System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            preOrder(root.leftChild);</span><br><span class="line">            preOrder(root.rightChild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">inOrder</span><span class="params">(Node&lt;T&gt; root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">            inOrder(root.leftChild);</span><br><span class="line">            System.out.print(root.data);</span><br><span class="line">            System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            inOrder(root.rightChild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">postOrder</span><span class="params">(Node&lt;T&gt; root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">            postOrder(root.leftChild);</span><br><span class="line">            postOrder(root.rightChild);</span><br><span class="line">            System.out.print(root.data);</span><br><span class="line">            System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>createTree</code>方法，每当要插入一个新节点时，便调用该函数。该函数会递归的搜索整棵树，确保找到一个合适的位置插入新的节点（比根节点小则插在左子树，大则插在右子树）</li><li><code>printTree</code>方法，用于打印建造完成的树。底层提供前序、中序、后序三种遍历方式</li><li><code>compare</code>方法用于比较两个节点的大小，这里简单使用<code>hashcode</code>来作比较。众所周知，<code>Integer</code>对象的<code>hashcode</code>即为本身</li></ul><h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><p>在二叉搜索树中，删除一个节点算是相当复杂的一份工作。主要面临三种情况</p><ul><li>节点为叶子节点，则直接删除</li><li>只包含左子树或者右子树的节点，则将父节点指向待删除的节点的唯一直接子节点</li><li>包含左右子树的节点，则寻找右子树最小值或左子树最大值替换该节点</li></ul><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteNode</span><span class="params">(T data)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (data == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    root = delete(root, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Node&lt;T&gt; <span class="title function_">delete</span><span class="params">(Node&lt;T&gt; root, T data)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (compare(root, data) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        root.rightChild = delete(root.rightChild, data);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (compare(root, data) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        root.leftChild = delete(root.leftChild, data);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 该节点拥有左右子树</span></span><br><span class="line">        <span class="keyword">if</span> (root.leftChild != <span class="literal">null</span> &amp;&amp; root.rightChild != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">T</span> <span class="variable">temp</span> <span class="operator">=</span> getMin(root.rightChild);</span><br><span class="line">            root.data = temp;</span><br><span class="line">            root.rightChild = delete(root.rightChild, temp);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (root.leftChild != <span class="literal">null</span>) &#123;</span><br><span class="line">                root = root.leftChild;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                root = root.rightChild;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>getMin</code>方法用于寻找树中的最小节点。在一颗二叉排序树中，一目了然的，最小节点就是这棵树最靠左的节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> T <span class="title function_">getMin</span><span class="params">(Node&lt;T&gt; root)</span> &#123;</span><br><span class="line">       Node&lt;T&gt; temp = root;</span><br><span class="line">       <span class="keyword">while</span> (temp.leftChild != <span class="literal">null</span>) &#123;</span><br><span class="line">           temp = temp.leftChild;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> temp.data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试检验"><a href="#测试检验" class="headerlink" title="测试检验"></a>测试检验</h3><p>编写单元测试，检验结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer[] arrays = <span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">50</span>, <span class="number">66</span>, <span class="number">60</span>, <span class="number">26</span>, <span class="number">21</span>, <span class="number">30</span>, <span class="number">70</span>, <span class="number">68</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createBsTree</span><span class="params">()</span> &#123;</span><br><span class="line">    BsTree&lt;Integer&gt; bsTree = <span class="keyword">new</span> <span class="title class_">BsTree</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Integer data : arrays) &#123;</span><br><span class="line">        bsTree.createTree(data);</span><br><span class="line">    &#125;</span><br><span class="line">    bsTree.printTree();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteNode</span><span class="params">()</span> &#123;</span><br><span class="line">    BsTree&lt;Integer&gt; bsTree = <span class="keyword">new</span> <span class="title class_">BsTree</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Integer data : arrays) &#123;</span><br><span class="line">        bsTree.createTree(data);</span><br><span class="line">    &#125;</span><br><span class="line">    bsTree.deleteNode(<span class="number">50</span>);</span><br><span class="line">    bsTree.printTree();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>createBsTree</code>方法建立的二叉搜索树为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">前序遍历： 50 26 21 30 66 60 70 68 </span><br><span class="line">中序遍历： 21 26 30 50 60 66 68 70 </span><br><span class="line">后序遍历： 21 30 26 60 68 70 66 50 </span><br></pre></td></tr></table></figure><p><code>deleteNode</code>方法测试结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">前序遍历： 60 26 21 30 66 70 68 </span><br><span class="line">中序遍历： 21 26 30 60 66 68 70 </span><br><span class="line">后序遍历： 21 30 26 68 70 66 60 </span><br></pre></td></tr></table></figure><p>观察得到，中序遍历的结果就是一组升序排列的数列</p><p>相关代码可以在 <a href="https://github.com/Cheung0-bit/tree-practice">https://github.com/Cheung0-bit/tree-practice</a> 中找到</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;树是数据结构中必学的一种数据结构。在实际应用中，常见的树结构有二叉搜索树、B树、B+树、AVL树、红黑树、字典树等。&lt;br&gt;对应的用途列举如</summary>
      
    
    
    
    <category term="面试" scheme="https://cheung0-bit.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="数据结构与算法" scheme="https://cheung0-bit.github.io/categories/%E9%9D%A2%E8%AF%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数据结构与算法" scheme="https://cheung0-bit.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Flask框架快速入门</title>
    <link href="https://cheung0-bit.github.io/ec225509277f/"/>
    <id>https://cheung0-bit.github.io/ec225509277f/</id>
    <published>2022-07-08T13:34:06.000Z</published>
    <updated>2022-11-25T07:08:49.931Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-Web-Flask框架"><a href="#Python-Web-Flask框架" class="headerlink" title="Python Web Flask框架"></a>Python Web Flask框架</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Flask是一个轻量级的基于Python的Web框架。相较于Django，更加轻量便捷，非常适合快速开发</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install Flask</span><br></pre></td></tr></table></figure><h3 id="查看介绍和版本"><a href="#查看介绍和版本" class="headerlink" title="查看介绍和版本"></a>查看介绍和版本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="built_in">print</span>(flask.__doc__)</span><br><span class="line"><span class="built_in">print</span>(flask.__version__)</span><br></pre></td></tr></table></figure><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>通过Pycharm新建一个Flask项目，可以看到初始化的目录结构为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">├─app.py</span><br><span class="line">├─static</span><br><span class="line">└─templates</span><br></pre></td></tr></table></figure><ul><li><p>static用于放置静态资源</p></li><li><p>templates存放模板文件</p></li><li><p>app.py是程序启动文件</p></li></ul><h3 id="第一个程序"><a href="#第一个程序" class="headerlink" title="第一个程序"></a>第一个程序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():  <span class="comment"># put application&#x27;s code here</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FLASK_APP = app.py</span><br><span class="line">FLASK_ENV = development</span><br><span class="line">FLASK_DEBUG = 0</span><br><span class="line">In folder C:/Users/Lin/Desktop/project/flask</span><br><span class="line"><span class="string">&quot;C:\Program Files\Python39\python.exe&quot;</span> -m flask run</span><br><span class="line"> * Serving Flask app <span class="string">&#x27;app.py&#x27;</span> (lazy loading)</span><br><span class="line"> * Environment: development</span><br><span class="line"> * Debug mode: off</span><br><span class="line"> * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)</span><br><span class="line">127.0.0.1 - - [05/Jul/2022 20:39:10] <span class="string">&quot;GET / HTTP/1.1&quot;</span> 200 -</span><br><span class="line">127.0.0.1 - - [05/Jul/2022 20:39:10] <span class="string">&quot;GET /favicon.ico HTTP/1.1&quot;</span> 404 -</span><br></pre></td></tr></table></figure><p>浏览器访问<a href="http://127.0.0.1:5000/%E5%B0%B1%E4%BC%9A%E6%98%BE%E7%A4%BAHello">http://127.0.0.1:5000/就会显示Hello</a> World</p><p>终端也会记录下访问的日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 - - [05/Jul/2022 20:39:10] <span class="string">&quot;GET / HTTP/1.1&quot;</span> 200 -</span><br></pre></td></tr></table></figure><h3 id="修改Flask配置"><a href="#修改Flask配置" class="headerlink" title="修改Flask配置"></a>修改Flask配置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br></pre></td></tr></table></figure><p>其中，<code>__name__</code>为默认值<code>__main__</code>。可以将这个参数自定义为自己的项目名。也可以自定义静态资源、模板文件文件夹：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(<span class="string">&#x27;my-project&#x27;</span>, static_folder=<span class="string">&#x27;my-static&#x27;</span>, template_folder=<span class="string">&#x27;my-template&#x27;</span>)</span><br></pre></td></tr></table></figure><p>更多自定义参数可以进入源码查看</p><h3 id="Debug模式"><a href="#Debug模式" class="headerlink" title="Debug模式"></a>Debug模式</h3><p>默认情况下，程序运行不会开启debug模式。此时，服务端出现错误信息不会在客户端显示。在开发过程中，查看错误信息是非常很有必要的，因此我们打开debug模式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>另外，会触发热重载</p><h3 id="绑定IP和端口"><a href="#绑定IP和端口" class="headerlink" title="绑定IP和端口"></a>绑定IP和端口</h3><p>Flask默认只能通过本机也就是<code>127.0.0.1</code>访问，默认端口为<code>5000</code>.</p><p>我们可以自定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8080</span>, debug=<span class="literal">True</span>) <span class="comment"># 0.0.0.0 代表所有网卡可以访问</span></span><br></pre></td></tr></table></figure><h2 id="获取URL参数"><a href="#获取URL参数" class="headerlink" title="获取URL参数"></a>获取URL参数</h2><p>URL参数即出现在url中的键值对，例如<a href="http://127.0.0.1/?username=jay-chou&password=123456">http://127.0.0.1?username=jay-chou&amp;password=123456</a></p><p>则此时的参数是</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    &#x27;username&#x27;<span class="punctuation">:</span>&#x27;jay-chou&#x27;<span class="punctuation">,</span></span><br><span class="line">    &#x27;password&#x27;<span class="punctuation">:</span>&#x27;<span class="number">123456</span>&#x27;</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>可以通过以下示例程序查看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> request.args.__str__()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">80</span>, debug=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>则会在网页上显示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ImmutableMultiDict([(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;jay-chou&#x27;</span>), (<span class="string">&#x27;password&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>)])</span><br></pre></td></tr></table></figure><p><code>request</code>方法还有多个API，这里简单罗列一下</p><p>可以通过一下程序进行测试体会</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> importlib.resources <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    path = request.path  <span class="comment"># 获取装饰器下的路径</span></span><br><span class="line">    full_path = request.full_path  <span class="comment"># 获取完整路径带上参数信息</span></span><br><span class="line">    username = request.args.get(<span class="string">&#x27;username&#x27;</span>)  <span class="comment"># 获取指定键值</span></span><br><span class="line">    <span class="comment"># 同上 第二个参数表示默认值，当第一个参数获取的值为None时，则取默认值</span></span><br><span class="line">    password = request.args.get(<span class="string">&#x27;password&#x27;</span>, <span class="string">&#x27;default&#x27;</span>)</span><br><span class="line">    <span class="built_in">list</span> = request.args.getlist(<span class="string">&#x27;p&#x27;</span>)  <span class="comment"># 获取同一个键的所有值，以列表的方式存下来</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;===================&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(path)</span><br><span class="line">    <span class="built_in">print</span>(full_path)</span><br><span class="line">    <span class="built_in">print</span>(username)</span><br><span class="line">    <span class="built_in">print</span>(password)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">list</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;===================&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;OK&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">80</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>控制台输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">===================</span><br><span class="line">/</span><br><span class="line">/?username=jay-chou&amp;p=1&amp;p=2</span><br><span class="line">jay-chou</span><br><span class="line">default</span><br><span class="line">[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>]</span><br><span class="line">===================</span><br></pre></td></tr></table></figure><h2 id="获取POST参数"><a href="#获取POST参数" class="headerlink" title="获取POST参数"></a>获取POST参数</h2><p>在实际开发中，我们遵行RESTFUL风格，一般数据都通过表单提交，使用POST请求，一下示例程序将简单展示如何获取POST表单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>) </span><span class="comment"># 限制只能通过POST请求来访问该API</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;=============================&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(request.headers)  <span class="comment"># 获取HTTP请求头</span></span><br><span class="line">    <span class="built_in">print</span>(request.stream.read())  <span class="comment"># 流式读取请求数据</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;=============================&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;OK&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">80</span>, debug=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里我使用<code>ApiFox</code>进行测试：</p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220706102834115.png" alt="image-20220706102834115"></p><p>控制台打印结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">=============================</span><br><span class="line">User-Agent: apifox/1.0.0 (https://www.apifox.cn)      </span><br><span class="line">Content-Type: application/json</span><br><span class="line">Accept: */*</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Length: 57</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b<span class="string">&#x27;&#123;\r\n    &quot;username&quot;:&quot;Jay-Chou&quot;,\r\n    &quot;password&quot;:&quot;123456&quot;\r\n&#125;&#x27;</span></span><br><span class="line">=============================</span><br></pre></td></tr></table></figure><p>可以看到我们获取到的是二进制数据，此时，我们可以使用Flask自带的表单解析API</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;=============================&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(request.headers)</span><br><span class="line">    <span class="built_in">print</span>(request.form)</span><br><span class="line">    <span class="built_in">print</span>(request.form[<span class="string">&#x27;username&#x27;</span>])</span><br><span class="line">    <span class="built_in">print</span>(request.form[<span class="string">&#x27;password&#x27;</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;=============================&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;OK&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220706103627152.png" alt="image-20220706103627152"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">=============================</span><br><span class="line">User-Agent: apifox/1.0.0 (https://www.apifox.cn)      </span><br><span class="line">Accept: */*</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Type: application/x-www-form-urlencoded       </span><br><span class="line">Content-Length: 33</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ImmutableMultiDict([(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;Jay-Chou&#x27;</span>), (<span class="string">&#x27;password&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>)])</span><br><span class="line">Jay-Chou</span><br><span class="line">123456</span><br><span class="line">=============================</span><br></pre></td></tr></table></figure><p>注意此时<code>Content-Type</code>为<code>application/x-www-form-urlencoded</code></p><h2 id="解析JSON"><a href="#解析JSON" class="headerlink" title="解析JSON"></a>解析JSON</h2><p>大多数情况下，前后端交互都是通过JSON的方式，<code>Content-Type</code>此时为<code>application/json</code>， 那么我们应该将其解析成对应的Python类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;=============================&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(request.headers)</span><br><span class="line">    <span class="built_in">print</span>(request.json)</span><br><span class="line">    <span class="built_in">print</span>(request.json[<span class="string">&#x27;username&#x27;</span>])</span><br><span class="line">    <span class="built_in">print</span>(request.json[<span class="string">&#x27;password&#x27;</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(request.json))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;=============================&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;OK&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220706104143150.png" alt="image-20220706104143150"></p><p>控制台打印结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">=============================</span><br><span class="line">User-Agent: apifox/1.0.0 (https://www.apifox.cn)      </span><br><span class="line">Content-Type: application/json</span><br><span class="line">Accept: */*</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Length: 57</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;Jay-Chou&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>&#125;        </span><br><span class="line">Jay-Chou</span><br><span class="line">123456</span><br><span class="line">&lt;class <span class="string">&#x27;dict&#x27;</span>&gt;</span><br><span class="line">=============================</span><br></pre></td></tr></table></figure><h3 id="返回体自定义"><a href="#返回体自定义" class="headerlink" title="返回体自定义"></a>返回体自定义</h3><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    res = request.json</span><br><span class="line">    <span class="comment"># 方式一</span></span><br><span class="line">    resp = Response(json.dumps(res), mimetype=<span class="string">&#x27;application/json&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    res = request.json</span><br><span class="line">    <span class="comment"># 方式一</span></span><br><span class="line">    resp = jsonify(res)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure><p>均会得到返回结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Jay-Chou&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><p>上传文件也是使用POST方法，这里我们将上传的文件放在<code>static</code>目录下</p><p>示例程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> uuid <span class="keyword">import</span> uuid1</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件上传目录</span></span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="string">&#x27;static&#x27;</span></span><br><span class="line"><span class="comment"># 支持的文件格式</span></span><br><span class="line">app.config[<span class="string">&#x27;ALLOW_EXTENSIONS&#x27;</span>] = &#123;<span class="string">&#x27;png&#x27;</span>, <span class="string">&#x27;jpg&#x27;</span>, <span class="string">&#x27;jpeg&#x27;</span>, <span class="string">&#x27;gif&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isAllowed</span>(<span class="params">filename</span>):  <span class="comment"># 判断是否为指定格式</span></span><br><span class="line">    <span class="comment"># rsplit方法表示从字符串后面开始分割，第二个参数表示分割次数</span></span><br><span class="line">    <span class="comment"># 例如：xxx.png.jpg 会被分割为 [&#x27;xxx.png&#x27;,&#x27;jpg&#x27;]</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">and</span> \</span><br><span class="line">        filename.rsplit(<span class="string">&#x27;.&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>] <span class="keyword">in</span> app.config[<span class="string">&#x27;ALLOW_EXTENSIONS&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generateName</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(uuid1()) + <span class="string">&#x27;.&#x27;</span> + filename.rsplit(<span class="string">&#x27;.&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        image = request.files[<span class="string">&#x27;image&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> image <span class="keyword">and</span> isAllowed(image.filename):</span><br><span class="line">            <span class="comment"># 使用自定义文件名保存图片（这里采用UUID）</span></span><br><span class="line">            filename = generateName(image.filename)</span><br><span class="line">            path = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename)</span><br><span class="line">            <span class="built_in">print</span>(path)</span><br><span class="line">            image.save(path)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;fail&#x27;</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">80</span>, debug=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用<code>ApiFox</code>进行测试：<br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220706151536714.png" alt="image-20220706151536714"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220706151526649.png" alt="image-20220706151526649"></p><h2 id="RESTFUL风格URL"><a href="#RESTFUL风格URL" class="headerlink" title="RESTFUL风格URL"></a>RESTFUL风格URL</h2><h3 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h3><p>采用restful风格的url可以取代原始的方式</p><p>下面是示例程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;username&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">queryUser</span>(<span class="params">username</span>):</span><br><span class="line">    <span class="built_in">print</span>(username)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(username))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;welcome &#x27;</span> + username</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;username&gt;/all&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">queryAllUsers</span>(<span class="params">username</span>):</span><br><span class="line">    <span class="built_in">print</span>(username)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(username))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;welcome &#x27;</span> + username</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">80</span>, debug=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>访问<a href="http://127.0.0.1/user/jay-chou">http://127.0.0.1/user/jay-chou</a></p><ul><li>返回welcome jay-chou</li><li>打印</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jay-chou</span><br><span class="line">&lt;class <span class="string">&#x27;str&#x27;</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>访问<a href="http://127.0.0.1/user/jay-chou/">http://127.0.0.1/user/jay-chou/</a></p><ul><li>返回Not Found</li></ul></li><li><p>访问<a href="http://127.0.0.1/user/jay-chou//all">http://127.0.0.1/user/jay-chou//all</a></p><ul><li>返回welcome jay-chou</li><li>打印</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jay-chou</span><br><span class="line">&lt;class <span class="string">&#x27;str&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>由此可以看出，传递的都是str类型的变量，且url必须完整</p></li></ul><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>如果需求是根据用户ID查询，那么我们就要拿到一个数字类型的变量，此时可以这么做：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/queryById/&lt;int:num&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">queryUserById</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(num))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;查询成功&#x27;</span></span><br></pre></td></tr></table></figure><p>若访问<a href="http://127.0.0.1/user/queryById/1">http://127.0.0.1/user/queryById/1</a></p><p>则会返回<code>查询成功</code>，打印</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">&lt;class <span class="string">&#x27;int&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>若url中不是一个数字，则会返回Not Found<br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220706153708150.png" alt="image-20220706153708150"></p><p>Flask自带的转换器类型：</p><ul><li>int 接受整数</li><li>float 接受浮点数</li><li>string 默认是字符串接收器</li><li>path 和默认相似 但也接受斜线</li></ul><p>此外，可以自定义转换器用于校验，这里就不多赘述了</p><h3 id="使用url-for"><a href="#使用url-for" class="headerlink" title="使用url_for"></a>使用url_for</h3><p>工具函数<code>url_for</code>可以让你以软编码的形式生成url，提供开发效率</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, url_for</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;path:username&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">queryUser</span>(<span class="params">username</span>):</span><br><span class="line">    <span class="built_in">print</span>(username)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(username))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;welcome &#x27;</span> + username</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;username&gt;/all&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">queryAllUsers</span>(<span class="params">username</span>):</span><br><span class="line">    <span class="built_in">print</span>(username)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(username))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;welcome &#x27;</span> + username</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/queryById/&lt;int:num&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">queryUserById</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(num))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;查询成功&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/test&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="built_in">print</span>(url_for(<span class="string">&#x27;queryUser&#x27;</span>, username=<span class="string">&#x27;jay-chou&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(url_for(<span class="string">&#x27;queryAllUsers&#x27;</span>, username=<span class="string">&#x27;jay-chou&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(url_for(<span class="string">&#x27;queryUserById&#x27;</span>, num=<span class="string">&#x27;666&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;OK&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">80</span>, debug=<span class="literal">True</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/user/jay-chou</span><br><span class="line">/user/jay-chou/all</span><br><span class="line">/user/queryById/666</span><br></pre></td></tr></table></figure><h2 id="redirect重定向"><a href="#redirect重定向" class="headerlink" title="redirect重定向"></a>redirect重定向</h2><p>使用redirect方法，前端对执行重定向</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, redirect</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/redirect&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_redirect</span>():</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;https://www.bilibili.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">80</span>, debug=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用jinja2模板引擎"><a href="#使用jinja2模板引擎" class="headerlink" title="使用jinja2模板引擎"></a>使用jinja2模板引擎</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, abort, render_template, request, redirect</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index/&lt;username&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">username</span>):</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, username=username)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">80</span>, debug=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>welcome: &#123;&#123;username&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>访问<a href="http://127.0.0.1/index/jay-chou">http://127.0.0.1/index/jay-chou</a></p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220706161252973.png" alt="image-20220706161252973"></p><p>可以看到，网页被渲染了出来</p><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><h3 id="引入库"><a href="#引入库" class="headerlink" title="引入库"></a>引入库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure><h3 id="规范一个数据库操作类（以MySQL为例）"><a href="#规范一个数据库操作类（以MySQL为例）" class="headerlink" title="规范一个数据库操作类（以MySQL为例）"></a>规范一个数据库操作类（以MySQL为例）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MysqlDb</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, host, port, user, passwd, db</span>):</span><br><span class="line">        <span class="comment"># 建立数据库连接</span></span><br><span class="line">        self.conn = pymysql.connect(</span><br><span class="line">            host=host,</span><br><span class="line">            port=port,</span><br><span class="line">            user=user,</span><br><span class="line">            passwd=passwd,</span><br><span class="line">            db=db,</span><br><span class="line">            autocommit=<span class="literal">True</span></span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># 通过 cursor() 创建游标对象，并让查询结果以字典格式输出</span></span><br><span class="line">        self.cur = self.conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):  <span class="comment"># 对象资源被释放时触发，在对象即将被删除时的最后操作</span></span><br><span class="line">        <span class="comment"># 关闭游标</span></span><br><span class="line">        self.cur.close()</span><br><span class="line">        <span class="comment"># 关闭数据库连接</span></span><br><span class="line">        self.conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">select_db</span>(<span class="params">self, sql</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;查询&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 检查连接是否断开，如果断开就进行重连</span></span><br><span class="line">        self.conn.ping(reconnect=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 使用 execute() 执行sql</span></span><br><span class="line">        self.cur.execute(sql)</span><br><span class="line">        <span class="comment"># 使用 fetchall() 获取查询结果</span></span><br><span class="line">        data = self.cur.fetchall()</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">execute_db</span>(<span class="params">self, sql</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;更新/新增/删除&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 检查连接是否断开，如果断开就进行重连</span></span><br><span class="line">            self.conn.ping(reconnect=<span class="literal">True</span>)</span><br><span class="line">            <span class="comment"># 使用 execute() 执行sql</span></span><br><span class="line">            self.cur.execute(sql)</span><br><span class="line">            <span class="comment"># 提交事务</span></span><br><span class="line">            self.conn.commit()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;操作出现错误：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(e))</span><br><span class="line">            <span class="comment"># 回滚所有更改</span></span><br><span class="line">            self.conn.rollback()</span><br></pre></td></tr></table></figure><h3 id="实例化一个全局单例"><a href="#实例化一个全局单例" class="headerlink" title="实例化一个全局单例"></a>实例化一个全局单例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = MysqlDb(MYSQL_HOST, MYSQL_PORT, MYSQL_USER, MYSQL_PASSWD, MYSQL_DB)</span><br></pre></td></tr></table></figure><p>相关数据库配置信息自行配置</p><h3 id="全局使用"><a href="#全局使用" class="headerlink" title="全局使用"></a>全局使用</h3><p>在开发代码中，写好需要使用的SQL语句，调用全局单例db提供的API，执行数据库事务</p><p>举一个例子，首先新建一个用户表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `nick_name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci;</span><br></pre></td></tr></table></figure><p>插入几个数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;小明&#x27;</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;小红&#x27;</span>, <span class="number">18</span>);</span><br></pre></td></tr></table></figure><p>这里我们获取用户表中所有的用户信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sql = <span class="string">&#x27;select * from user&#x27;</span></span><br><span class="line">data = db.select_db(sql)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;<span class="string">&#x27;id&#x27;</span>: 1, <span class="string">&#x27;nick_name&#x27;</span>: <span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: 5&#125;, &#123;<span class="string">&#x27;id&#x27;</span>: 2, <span class="string">&#x27;nick_name&#x27;</span>: <span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: 18&#125;]</span><br></pre></td></tr></table></figure><p>笔者也浅尝过Flask的ORM框架，但说实话，并没有简单操作，甚至有些复杂……因此，这里就不做阐述了</p><h2 id="自定义装饰器"><a href="#自定义装饰器" class="headerlink" title="自定义装饰器"></a>自定义装饰器</h2><h3 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br></pre></td></tr></table></figure><h3 id="自定义处理逻辑"><a href="#自定义处理逻辑" class="headerlink" title="自定义处理逻辑"></a>自定义处理逻辑</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, abort</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">has_powercode</span>(<span class="params">powercode</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">f</span>):</span><br><span class="line"><span class="meta">        @wraps(<span class="params">f</span>)</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">decorated_function</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            <span class="string">&quot;&quot;&quot;处理逻辑（简化处理）&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">if</span> powercode != <span class="string">&#x27;user:add&#x27;</span>:</span><br><span class="line">                abort(<span class="number">403</span>)</span><br><span class="line">            <span class="keyword">return</span> f(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> decorated_function</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/api/user/add&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@has_powercode(<span class="params"><span class="string">&#x27;user:delete&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_user</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>网页简单测试一下：</p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220708224340905.png" alt="image-20220708224340905"></p><p>很遗憾，在装饰器因权限不足，出发了abort(403)，程序就不会结束该函数，不会继续执行被该装饰器所修饰的函数了</p><h3 id="能做些什么"><a href="#能做些什么" class="headerlink" title="能做些什么"></a>能做些什么</h3><p>我们可以用来做<code>Authentication</code>和<code>Authorization</code>(可恶，想起了无聊的搬砖生活……)</p><p>通过装饰器，自定义个性化的身份验证和鉴权逻辑，从而满足系统的安全保障</p><h2 id="配置Swagger文档"><a href="#配置Swagger文档" class="headerlink" title="配置Swagger文档"></a>配置Swagger文档</h2><p>作为一个开发工程师，写好一个接口文档在团队协作中非常重要，Flask也集成了Swagger文档，我们来看看怎么使用</p><h3 id="引入库-1"><a href="#引入库-1" class="headerlink" title="引入库"></a>引入库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flasgger</span><br></pre></td></tr></table></figure><h3 id="配置相关信息"><a href="#配置相关信息" class="headerlink" title="配置相关信息"></a>配置相关信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flasgger <span class="keyword">import</span> Swagger</span><br><span class="line"></span><br><span class="line">swagger_config = Swagger.DEFAULT_CONFIG  <span class="comment"># Swagger通过配置信息渲染SwaggerUI展示信息</span></span><br><span class="line">swagger_config[<span class="string">&#x27;title&#x27;</span>] = TITLE  <span class="comment"># 接口文档标题</span></span><br><span class="line">swagger_config[<span class="string">&#x27;version&#x27;</span>] = VERSION  <span class="comment"># 版本号</span></span><br><span class="line">swagger_config[<span class="string">&#x27;termsOfService&#x27;</span>] = TERMSOFSERVICE  <span class="comment"># 条文说明</span></span><br><span class="line">swagger_config[<span class="string">&#x27;specs&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;route&#x27;</span>] = ROUTE  <span class="comment"># 接口集合路由</span></span><br><span class="line">swagger_config[<span class="string">&#x27;description&#x27;</span>] = DESCRIPTION  <span class="comment"># 描述</span></span><br><span class="line"></span><br><span class="line">Swagger(app, config=swagger_config)</span><br></pre></td></tr></table></figure><h3 id="对应每一个接口填写描述信息"><a href="#对应每一个接口填写描述信息" class="headerlink" title="对应每一个接口填写描述信息"></a>对应每一个接口填写描述信息</h3><p>例如，我们这里有一个通过用户名称获取用户信息的接口：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/api/user/queryByName/&lt;string:username&gt;&#x27;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">queryUserByName</span>(<span class="params">username</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    通过名称获取用户信息</span></span><br><span class="line"><span class="string">    ---</span></span><br><span class="line"><span class="string">    tags:</span></span><br><span class="line"><span class="string">      - 用户接口</span></span><br><span class="line"><span class="string">    parameters:</span></span><br><span class="line"><span class="string">      - name: username</span></span><br><span class="line"><span class="string">        in: path</span></span><br><span class="line"><span class="string">        type: string</span></span><br><span class="line"><span class="string">        required: true</span></span><br><span class="line"><span class="string">        description: 用户名称</span></span><br><span class="line"><span class="string">    responses:</span></span><br><span class="line"><span class="string">      1001:</span></span><br><span class="line"><span class="string">        description: 不可传入空</span></span><br><span class="line"><span class="string">      1004:</span></span><br><span class="line"><span class="string">        description: 查不到该用户</span></span><br><span class="line"><span class="string">      0:</span></span><br><span class="line"><span class="string">        description: 查询成功</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> user.queryByName(username)</span><br></pre></td></tr></table></figure><p>相关描述信息以yaml的形式写在了方法下面的注释代码块里面（个人觉得很魔性）</p><p>flasgger包里会有程序来阅读这些配置，并将描述信息渲染在页面上</p><h3 id="真实的样貌"><a href="#真实的样貌" class="headerlink" title="真实的样貌"></a>真实的样貌</h3><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220708222333577.png" alt="image-20220708222333577"></p><h2 id="开启跨域"><a href="#开启跨域" class="headerlink" title="开启跨域"></a>开启跨域</h2><h3 id="引入库-2"><a href="#引入库-2" class="headerlink" title="引入库"></a>引入库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-cors</span><br></pre></td></tr></table></figure><h3 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> CORS</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">CORS(app, supports_credentials=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Python-Web-Flask框架&quot;&gt;&lt;a href=&quot;#Python-Web-Flask框架&quot; class=&quot;headerlink&quot; title=&quot;Python Web Flask框架&quot;&gt;&lt;/a&gt;Python Web Flask框架&lt;/h1&gt;&lt;h2 id=&quot;介</summary>
      
    
    
    
    <category term="Python" scheme="https://cheung0-bit.github.io/categories/Python/"/>
    
    
    <category term="Flask" scheme="https://cheung0-bit.github.io/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>应用层</title>
    <link href="https://cheung0-bit.github.io/f36f3cc3c14e/"/>
    <id>https://cheung0-bit.github.io/f36f3cc3c14e/</id>
    <published>2022-06-25T13:03:27.000Z</published>
    <updated>2022-11-25T06:52:05.279Z</updated>
    
    <content type="html"><![CDATA[<h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><h2 id="域名系统DNS"><a href="#域名系统DNS" class="headerlink" title="域名系统DNS"></a>域名系统DNS</h2><h3 id="DNS概述"><a href="#DNS概述" class="headerlink" title="DNS概述"></a>DNS概述</h3><ul><li>DNS是一个分布式数据库，提供了主机名和IP地址之间相互转换的服务。分布式指的是每个站点仅保留它自己的那部分数据</li></ul><h3 id="Internet域名结构"><a href="#Internet域名结构" class="headerlink" title="Internet域名结构"></a>Internet域名结构</h3><ul><li>层次结构，从上至下依次为：根域名、顶级域名、二级域名<br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220625152224244.png" alt="image-20220625152224244"></li></ul><h3 id="域名服务器"><a href="#域名服务器" class="headerlink" title="域名服务器"></a>域名服务器</h3><ul><li>一个服务器所负责管辖的范围叫做区（zone）</li><li>每一个区设置的权限域名服务器，用来保存该区中的所有主机的域名到IP地址的映射</li><li>DNS可以使用UDP或者TCP进行传输，端口号位53.大多数情况下使用UDP传输</li></ul><h3 id="DNS劫持（DNS-Hijacking）"><a href="#DNS劫持（DNS-Hijacking）" class="headerlink" title="DNS劫持（DNS Hijacking）"></a>DNS劫持（DNS Hijacking）</h3><ul><li>通过劫持DNS服务器，通过某些手段取得某域名的解析记录控制权，进而修改此域名的解析结果。比如将<code>nuist.edu.cn</code>的IP修改为某黄色网站IP，给学生带来不好的冲浪体验。或者修改为黑客的钓鱼网站，窃取用户个人信息<br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220625153107071.png" alt="image-20220625153107071"></li></ul><h3 id="DNS污染（DNS-Pollution）"><a href="#DNS污染（DNS-Pollution）" class="headerlink" title="DNS污染（DNS Pollution）"></a>DNS污染（DNS Pollution）</h3><ul><li>又名域名服务器缓存污染或者域名服务器快照侵害。指一些刻意制造或无意中制造出来的域名服务器分组，把域名指往不正确的IP地址，这是一种DNS缓存投毒攻击。由于DNS查询没有任何的认证机制，且基于无连接不可靠的UDP协议，因此DNS的查询很容易被篡改<br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220625153826527.png" alt="image-20220625153826527"></li></ul><h2 id="文件传送协议FTP"><a href="#文件传送协议FTP" class="headerlink" title="文件传送协议FTP"></a>文件传送协议FTP</h2><h3 id="FTP概述"><a href="#FTP概述" class="headerlink" title="FTP概述"></a>FTP概述</h3><ul><li>FTP是因特网上使用得最广泛的文件传送协议</li><li>FTP 提供交互式的访问，允许客户指明文件的类型与格式，并允许文件具有存取权限</li><li>FTP 屏蔽了各计算机系统的细节，因而适合于在异构网络中任意计算机之间传送文件</li></ul><h3 id="基本工作原理"><a href="#基本工作原理" class="headerlink" title="基本工作原理"></a>基本工作原理</h3><ul><li>FTP通过TCP连接，并通过两个连接来传送一个文件<ul><li>控制连接：服务器打开端口号 21 等待客户端的连接，客户端主动建立连接后，使用这个连接将客户端的命令传送给服务器，并传回服务器的应答</li><li>数据连接：用来传送一个文件数据</li></ul></li><li>根据数据连接是否是服务器端主动建立，FTP 有主动和被动两种模式<ul><li>主动模式：服务器端主动建立数据连接，其中服务器端的端口号为 20，客户端的端口号随机，但是必须大于 1024，因为 0~1023 是熟知端口号</li><li>被动模式：客户端主动建立数据连接，其中客户端的端口号由客户端自己指定，服务器端的端口号随机</li><li>主动模式要求客户端开放端口号给服务器端，需要去配置客户端的防火墙。被动模式只需要服务器端开放端口号即可，无需客户端配置防火墙。但是被动模式会导致服务器端的安全性减弱，因为开放了过多的端口号</li></ul></li></ul><h3 id="简单文件传送协议TFTP"><a href="#简单文件传送协议TFTP" class="headerlink" title="简单文件传送协议TFTP"></a>简单文件传送协议TFTP</h3><ul><li>TFTP 是一个很小且易于实现的文件传送协议。</li><li>TFTP 使用客户服务器方式和使用 UDP 数据报，因此 TFTP 需要有自己的差错改正措施。</li><li>TFTP 只支持文件传输而不支持交互。</li><li>TFTP 没有一个庞大的命令集，没有列目录的功能，也不能对用户进行身份鉴别。 </li><li>TFTP 的主要特点是<ul><li>每次传送的数据 PDU 中有 512 字节的数据，但最后一次可不足 512 字节。</li><li>数据 PDU 也称为文件块(block)，每个块按序编号，从 1 开始。</li><li>支持 ASCII 码或二进制传送。</li><li>可对文件进行读或写。</li><li>使用很简单的首部。</li></ul></li></ul><h2 id="远程终端协议TELNET"><a href="#远程终端协议TELNET" class="headerlink" title="远程终端协议TELNET"></a>远程终端协议TELNET</h2><ul><li>TELNET 是一个简单的远程终端协议，也是因特网的正式标准</li><li>用户用 TELNET 就可在其所在地通过 TCP 连接注册（即登录）到远地的另一个主机上（使用主机名或 IP 地址）</li><li>TELNET 能将用户的击键传到远地主机，同时也能将远地主机的输出通过 TCP 连接返回到用户屏幕。这种服务是透明的，因为用户感觉到好像键盘和显示器是直接连在远地主机上</li><li>现SSH协议更加安全（基于非对称加密的公私钥体系）也更加流行，反正我是没用过TELNET协议<br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220625154802868.png" alt="image-20220625154802868"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220625154826534.png" alt="image-20220625154826534"></li><li>SSH协议基于一组完备的加密算法<ul><li>密钥交换算法（RSA、DH…）</li><li>认证算法（RSA、DSA…）</li><li>加密数据算法（AES…）</li><li>MAC算法（SHA系列…）</li></ul></li></ul><p>需要有一些密码学基础的铺垫，可以阅读<a href="https://juejin.cn/post/7071999949654720526">我讲解基础密码学的文章</a>入门，SSH协议实现细节暂不做介绍</p><h2 id="万维网WWW"><a href="#万维网WWW" class="headerlink" title="万维网WWW"></a>万维网WWW</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>万维网 WWW (World Wide Web)并非某种特殊的计算机网络</li><li>万维网是一个大规模的、联机式的信息储藏所</li><li>万维网用链接的方法能非常方便地从因特网上的一个站点访问另一个站点，从而主动地按需获取丰富的信息</li><li>万维网是分布式超媒体(hypermedia)系统，它是超文本(hypertext)系统的扩充</li></ul><h3 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h3><ul><li>万维网以客户服务器方式工作</li><li>浏览器就是在用户计算机上的万维网客户程序。万维网文档所驻留的计算机则运行服务器程序，因此这个计算机也称为万维网服务器</li></ul><h3 id="万维网解决的问题"><a href="#万维网解决的问题" class="headerlink" title="万维网解决的问题"></a>万维网解决的问题</h3><ul><li>怎样标志分布在整个因特网上的万维网文档<ul><li>使用统一资源定位符 URL (Uniform Resource Locator)来标志万维网上的各种文档</li><li>每一个文档在整个因特网的范围内具有唯一的标识符 URL</li></ul></li><li>用何协议实现万维网上各种超链的链接<ul><li>超文本传送协议 HTTP (Hyper-Text Transfer Protocol)</li></ul></li><li>怎样使各种万维网文档都能在因特网上的各种计算机上显示出来，同时使用户清楚地知道在什么地方存在着超链<ul><li>超文本标记语言 HTML (Hyper-Text Markup Language)使得万维网页面的设计者可以很方便地用一个超链从本页面的某处链接到因特网上的任何一个万维网页面，并且能够在自己的计算机屏幕上将这些页面显示出来</li></ul></li><li>怎样使用户能够很方便地找到所需的信息<ul><li>为了在万维网上方便地查找信息，用户可使用各种的搜索工具（即搜索引擎）</li></ul></li></ul><h3 id="统一资源定位符URL"><a href="#统一资源定位符URL" class="headerlink" title="统一资源定位符URL"></a>统一资源定位符URL</h3><ul><li>统一资源定位符 URL 是对可以从因特网上得到的资源的位置和访问方法的一种简洁的表示</li><li>URL 的一般形式是：&lt;协议&gt;:&#x2F;&#x2F;&lt;主机&gt;:&lt;端口&gt;&#x2F;&lt;路径&gt; （HTTP协议默认端口80，可忽略不写）<br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220625160339820.png" alt="image-20220625160339820"></li></ul><h3 id="超文本传送协议HTTP"><a href="#超文本传送协议HTTP" class="headerlink" title="超文本传送协议HTTP"></a>超文本传送协议HTTP</h3><ul><li>HTTP 是面向事务的客户服务器协议</li><li>HTTP 1.0 协议是无状态的(stateless)</li><li>HTTP 协议本身也是无连接的，虽然它使用了面向连接的 TCP 向上提供的服务</li><li>HTTP 1.1 开始，一次TCP连接建立后，可以持续进行报文传输（短连接 -&gt; 长连接）</li></ul><h3 id="万维网的文档"><a href="#万维网的文档" class="headerlink" title="万维网的文档"></a>万维网的文档</h3><ul><li><p>超文本标记语言HTML</p><ul><li>超文本标记语言 HTML 中的 Markup 的意思就是“设置标记”</li><li>HTML 定义了许多用于排版的命令（即标签）</li><li>HTML 把各种标签嵌入到万维网的页面中。这样就构成了所谓的 HTML 文档。HTML 文档是一种可以用任何文本编辑器创建的 ASCII 码文件<br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220625160832310.png" alt="image-20220625160832310"></li></ul></li><li><p>动态万维网文档</p><ul><li>静态文档是指该文档创作完毕后就存放在万维网服务器中，在被用户浏览的过程中，内容不会改变。 </li><li>动态文档是指文档的内容是在浏览器访问万维网服务器时才由应用程序动态创建。</li><li>动态文档和静态文档之间的主要差别体现在服务器一端。这主要是文档内容的生成方法不同。而从浏览器的角度看，这两种文档并没有区别。</li></ul></li></ul><h3 id="万维网的信息检索系统"><a href="#万维网的信息检索系统" class="headerlink" title="万维网的信息检索系统"></a>万维网的信息检索系统</h3><ul><li>全文检索搜索<ul><li>全文检索搜索引擎是一种纯技术型的检索工具。它的工作原理是通过搜索软件到因特网上的各网站收集信息，找到一个网站后可以从这个网站再链接到另一个网站。然后按照一定的规则建立一个很大的在线数据库供用户查询</li></ul></li><li>分类目录搜索<ul><li>分类目录搜索引擎并不采集网站的任何信息，而是利用各网站向搜索引擎提交的网站信息时填写的关键词和网站描述等信息，经过人工审核编辑后，如果认为符合网站登录的条件，则输入到分类目录的数据库中，供网上用户查询。</li></ul></li></ul><h2 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><ul><li>电子邮件(e-mail)是因特网上使用得最多的和最受用户欢迎的一种应用</li><li>电子邮件把邮件发送到收件人使用的邮件服务器，并放在其中的收件人邮箱中，收件人可随时上网到自己使用的邮件服务器进行读取</li><li>电子邮件不仅使用方便，而且还具有传递迅速和费用低廉的优点</li><li>一个电子邮件系统由三部分组成：用户代理、邮件服务器以及邮件协议</li></ul><h3 id="简单邮件传送协议SMTP"><a href="#简单邮件传送协议SMTP" class="headerlink" title="简单邮件传送协议SMTP"></a>简单邮件传送协议SMTP</h3><ul><li>SMTP 只能发送 ASCII 码，而互联网邮件扩充 MIME 可以发送二进制文件。MIME 并没有改动或者取代 SMTP，而是增加邮件主体的结构，定义了非 ASCII 码的编码规则</li></ul><h3 id="电子邮箱的信息格式"><a href="#电子邮箱的信息格式" class="headerlink" title="电子邮箱的信息格式"></a>电子邮箱的信息格式</h3><ul><li>一个电子邮件分为信封和内容两大部分</li><li>RFC 822 只规定了邮件内容中的首部(header)格式，而对邮件的主体(body)部分则让用户自由撰写<ul><li>邮件内容的首部<ul><li>“To:”后面填入一个或多个收件人的电子邮件地址。用户只需打开地址簿，点击收件人名字，收件人的电子邮件地址就会自动地填入到合适的位置上</li><li>“Subject:”是邮件的主题。它反映了邮件的主要内容，便于用户查找邮件</li><li>抄送 “Cc:” 表示应给某某人发送一个邮件副本</li><li>“From” 和 “Date” 表示发信人的电子邮件地址和发信日期。“Reply-To” 是对方回信所用的地址</li></ul></li></ul></li></ul><h3 id="邮件读取协议POP3和IMAP"><a href="#邮件读取协议POP3和IMAP" class="headerlink" title="邮件读取协议POP3和IMAP"></a>邮件读取协议POP3和IMAP</h3><ul><li>POP3<ul><li>POP3 的特点是只要用户从服务器上读取了邮件，就把该邮件删除。但最新版本的 POP3 可以不删除邮件</li></ul></li><li>IMAP<ul><li>IMAP 协议中客户端和服务器上的邮件保持同步，如果不手动删除邮件，那么服务器上的邮件也不会被删除。IMAP 这种做法可以让用户随时随地去访问服务器上的邮件</li></ul></li></ul><h3 id="基于万维网的电子邮件"><a href="#基于万维网的电子邮件" class="headerlink" title="基于万维网的电子邮件"></a>基于万维网的电子邮件</h3><ul><li>电子邮件从 A 发送到网易邮件服务器是使用 HTTP 协议</li><li>两个邮件服务器之间的传送使用 SMTP</li><li>邮件从新浪邮件服务器传送到 B 是使用 HTTP 协议<br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220625161314069.png" alt="image-20220625161314069"></li></ul><h3 id="通用因特网邮件扩充MIME"><a href="#通用因特网邮件扩充MIME" class="headerlink" title="通用因特网邮件扩充MIME"></a>通用因特网邮件扩充MIME</h3><ul><li><p>MIME 并没有改动 SMTP 或取代它</p></li><li><p>MIME 的意图是继续使用目前的[RFC 822]格式，但增加了邮件主体的结构，并定义了传送非 ASCII 码的编码规则</p></li><li><p>用人话说就是MIME充当适配器，将传送内容进行正确编码（打破只能是ASCII编码的局限性），保证人类看懂</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;应用层&quot;&gt;&lt;a href=&quot;#应用层&quot; class=&quot;headerlink&quot; title=&quot;应用层&quot;&gt;&lt;/a&gt;应用层&lt;/h1&gt;&lt;h2 id=&quot;域名系统DNS&quot;&gt;&lt;a href=&quot;#域名系统DNS&quot; class=&quot;headerlink&quot; title=&quot;域名系统DNS</summary>
      
    
    
    
    <category term="面试" scheme="https://cheung0-bit.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="计算机网络" scheme="https://cheung0-bit.github.io/categories/%E9%9D%A2%E8%AF%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="计算机网络" scheme="https://cheung0-bit.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>传输层</title>
    <link href="https://cheung0-bit.github.io/23e9d1f067f1/"/>
    <id>https://cheung0-bit.github.io/23e9d1f067f1/</id>
    <published>2022-06-25T13:02:46.000Z</published>
    <updated>2022-11-25T06:51:56.999Z</updated>
    
    <content type="html"><![CDATA[<h1 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a>运输层</h1><h2 id="协议概述"><a href="#协议概述" class="headerlink" title="协议概述"></a>协议概述</h2><h3 id="进程之间的通信"><a href="#进程之间的通信" class="headerlink" title="进程之间的通信"></a>进程之间的通信</h3><ul><li>运输层向它上面的应用层提供通信服务，它属于面向通信部分的最高层，同时也是用户功能中的最低层。</li><li>两个主机进行通信实际上就是两个主机中的应用进程互相通信。 </li><li>应用进程之间的通信又称为<strong>端到端的通信</strong>。</li></ul><h3 id="两个主要协议"><a href="#两个主要协议" class="headerlink" title="两个主要协议"></a>两个主要协议</h3><ul><li>用户数据报UDP（User Datagram Protocol）</li><li>传输控制协议TCP（Transmission Control Protocol）</li></ul><h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><ul><li>软件端口和硬件端口<ul><li>在协议层间的抽象的协议端口是软件端口</li><li>路由器或交换机上的端口是硬件端口</li></ul></li><li>三类端口<ul><li>熟知端口 0-1023</li><li>登记端口号 1024-49151</li><li>客户端口号或短暂端口号 49152-65535</li></ul></li></ul><h2 id="用户数据协议报UDP"><a href="#用户数据协议报UDP" class="headerlink" title="用户数据协议报UDP"></a>用户数据协议报UDP</h2><h3 id="UDP概述"><a href="#UDP概述" class="headerlink" title="UDP概述"></a>UDP概述</h3><blockquote><p>用户数据报协议 UDP（User Datagram Protocol）是无连接的，尽最大可能交付，没有拥塞控制，面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加 UDP 首部），支持一对一、一对多、多对一和多对多的交互通信</p></blockquote><ul><li>UDP为应用层提供 <strong>不可靠、无连接、基于数据报的服务</strong><ul><li><strong>不可靠</strong>：不保证数据从发送端正确地传送到目的端，也无须为应用层数据保存副本，出现问题时（丢包，错序达到等） <code>UDP协议</code> 只是简单地通知应用程序发送失败。因此，使用 <code>UDP协议</code> 的应用程序通常需要自己处理数据确认、超时重传等逻辑</li><li><strong>无连接</strong>： 不需要建立连接也可以发送数据。通信双方每次发送数据都需要指定接收端的地址</li><li><strong>基于数据报的服务</strong>：每个UDP数据包都有一个长度，接收端必须以该长度为最小单位将其所有内容一次性读出，否则数据将被截断</li></ul></li></ul><h3 id="UDP首部格式"><a href="#UDP首部格式" class="headerlink" title="UDP首部格式"></a>UDP首部格式</h3><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220625103432026.png" alt="image-20220625103432026"></p><ul><li>16位源端端口&#x2F;目的端口</li><li>16位数据包长度：标志UDP首部与发送数据的长度之和，大小为2^16，即64K</li><li>16位校验和： 用于校验接受的数据与发送的数据是否一致，不一致则丢弃。<ul><li>校验方法：CRC</li></ul></li></ul><h3 id="基于UDP的协议"><a href="#基于UDP的协议" class="headerlink" title="基于UDP的协议"></a>基于UDP的协议</h3><ul><li>NFS: 网络文件系统</li><li>TFTP: 简单文件传输协议、</li><li>DHCP：动态主机配置协议</li><li>BOOTP：启动协议（用于无盘设备启动）</li><li>DNS：域名解析协议</li></ul><h2 id="传输控制协议TCP"><a href="#传输控制协议TCP" class="headerlink" title="传输控制协议TCP"></a>传输控制协议TCP</h2><h3 id="TCP主要概念"><a href="#TCP主要概念" class="headerlink" title="TCP主要概念"></a>TCP主要概念</h3><ul><li><p>TCP协议为应用层提供<strong>可靠的、面向连接、基于流的服务</strong></p><ul><li><strong>可靠</strong>： 通过超时重传、数据确认等方式来确保数据报被正确地发送至目的端</li><li><strong>面向连接</strong>： 双方都必须先分配必要的内核资源以建立全双工的连接，才能开始数据的读写</li><li><strong>基于流</strong>：基于流的数据没有边界限制</li></ul></li><li><p>TCP的连接</p><ul><li>TCP连接的端点叫做套接字（socket）或插口<ul><li>Socket &#x3D; IP: Port</li></ul></li></ul></li></ul><h3 id="TCP首部格式"><a href="#TCP首部格式" class="headerlink" title="TCP首部格式"></a>TCP首部格式</h3><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220625104615978.png" alt="image-20220625104615978"></p><ul><li><p>16位源端口&#x2F;目的端口：表示源端口&#x2F;目的端口的端口号，源端口有时可以不设置</p></li><li><p>32位序号： 序号是指发送数据的位置。每发送一次数据，就累加一次该数据字节数的大小。序号不会从 0 或 1 开始，而是在建立连接时由计算机生成的随机数作为其初始值（<code>ISN</code>，初始序号值），通过 <code>SYN</code>包 传给接收端主机。后续报文中序号值将被设置为 <code>ISN</code>+报文携带数据的第一个字节在整个字节流中的偏移 。如：后续 某个TCP报文段 传送的数据是字节流中的 第 1025~2048 字节 ，那么该报文段的序号值为 <code>ISN</code>+1025</p></li><li><p>32位确认序号： 对发送端发来的TCP报文段的响应，其值是 <strong>收到的TCP报文段的序号+1</strong> 。而发送端接收到这个确认序号以后可以认为在确认序号以前的数据都已经被正常接收。TCP通过序号和确认序号来实现包序管理，确保TCP数据是有序交付的</p></li><li><p>4位数据偏移：标识该TCP头部有多少个32bit。所以TCP头部最长是60字节</p></li><li><p>6位保留位：保留今后使用</p></li><li><p>6位标志位</p><ul><li>URG(Urgent Flag)：该位为 1 时，表示包中有需要紧急处理的数据</li><li>ACK(Acknowledge): 该位为1时，确认应答的字段变为有效。携带ACK标志的称为确认报文段</li><li>PSH(Push Flag)： 该位为1时，表示接收端应该立刻从 TCP接收缓冲区中读走数据，传输给上层的应用。为0时，则不需要立即读取而是先进行缓存</li><li>RST(Reset Flag)： 该位为1时，要求接收方重新建立连接。携带RST标志的称为<strong>复位报文段</strong></li><li>SYN(Synchronize Flag)：SYN为1表示希望建立连接，并在其序列号的字段进行序列号初始值的设定。携带SYN标志的称为<strong>同步报文段</strong> </li><li>FIN(Finish Flag)：该位为 1 时，表示通知对方本端今后不会再有数据发送，希望断开连接。当通信结束希望断开连接时，通信双方的主机之间就可以相互交换FIN位置为 1 的TCP段。每个主机又对对方的FIN包进行确认应答以后就可以断开连接。不过，主机收到FIN设置为 1 的TCP端以后不必马上回复一个FIN包，而是可以等到缓冲区中所有数据都已成功发送而被自动删除之后再发。携带FIN标志的称为<strong>结束报文段</strong></li></ul></li><li><p>16位窗口大小：是TCP流量控制的一个手段。这里说的窗口，指的是接收通告窗口。它告诉对方 <strong>本端的TCP接收缓冲区</strong> 还能容纳多少字节的数据，这样对方就可以控制发送数据的速度。<strong>用于实现滑动窗口机制，来进行流量控制</strong></p></li><li><p>16位校验和：由发送端填充，用于检验接收的数据（TCP头部+数据部分）与发送的数据是否一致，<strong>不一致则丢弃</strong> </p><ul><li>校验方法：CRC</li></ul></li><li><p>16位紧急指针：是一个正的偏移量。它和序号字段的值相加表示最后一个紧急数据（带外数据）的下一个字节的序号</p></li></ul><h3 id="TCP可靠传输"><a href="#TCP可靠传输" class="headerlink" title="TCP可靠传输"></a>TCP可靠传输</h3><ul><li><p>基于8种机制</p><ul><li><p>确认应答</p><ul><li>确认报文（ACK报文）是保证数据可靠传输的核心机制</li></ul></li><li><p>延时应答</p><ul><li>基于确认应答机制，但接收端收到发送端发来的数据后并<strong>不立即返回ACK应答</strong> <ul><li>立即返回ACK应答的话，这时候的接收缓冲区中的数据还没能够处理，缓存区的剩余大小就是窗口大小</li><li>但实际上应用程序可能很快就会读走接收缓冲区中的内容，因此我们 <strong>延迟一会</strong> ，等待缓存区中数据被处理，那么剩余的缓存区就会大些</li></ul></li></ul></li><li><p>捎带应答</p><ul><li>在延时应答的基础上，接受方和发送方都是<strong>一发一收</strong>，所以，我们在发送数据的时候，将ACK以搭顺风车的方式发送给对方</li></ul></li><li><p>超时重传</p><ul><li>实际网络中会有丢包的可能，<strong>TCP模块为每个TCP报文段都维护一个重传定时器</strong> ，该定时器在TCP报文段第一次发送时启动。如果<strong>超时时间内</strong>未收到接收方的<strong>确认报文段</strong> ，TCP模块将<strong>重传丢失的TCP报文段</strong> 并<strong>重置定时器</strong></li></ul></li><li><p>滑动窗口</p><ul><li>已在数据链路层做过介绍</li></ul></li><li><p>流量控制</p><ul><li>出现原因：接收端处理数据的速度是有限的，如果发送端发的太快，导致接收端的缓冲区满， 这个时候如果发送端继续发送，就会造成丢包，继而引起丢包重传等等一系列连锁反应</li><li>解决方案<ul><li>TCP连接阶段，双方协商窗口尺寸，同时接收方预留数据缓存区</li><li>发送方根据协商的结果，发送符合窗口尺寸的数据字节流，并等待对方的确认</li><li>接收端将<strong>接收缓冲区空闲大小</strong>放入 TCP 首部中的<strong>窗口大小字段</strong>，通过ACK报文通知发送端。窗口大小字段越大，说明网络的吞吐量越高</li><li>发送方根据确认信息，改变窗口的尺寸，增加或者减少发送未得到确认的字节流中的字节数</li><li>如果接收端缓冲区满了，就会将窗口置为0，这时发送方不再发送数据，但是需要定期发送一个窗口探测数据段，询问接收端当前<strong>接收缓冲区的空闲大小</strong></li><li>如果出现发送拥塞，发送窗口缩小为原来的一半，同时将超时重传的时间间隔扩大一倍</li><li>🚩而在传输过程中，发送窗口（SWND）的大小并不仅仅取决于接收窗口（RWND），还取决于下文将提到的拥塞窗口（CWND）</li></ul></li></ul></li><li><p>拥塞控制</p><ul><li><p>出现原因：提高网络利用率、降低丢包率，并保证网络资源对每条数据流的公平性</p></li><li><p>组成部分</p><ul><li>慢开始（slow start）</li><li>拥塞避免 （congestion avoidance）</li><li>快速重传（fast retransmit）</li><li>快速恢复（fast recovery）</li></ul></li><li><p>解决方案</p><ul><li><p>基于滑动窗口协议，引入<strong>拥塞窗口</strong></p><ul><li>发送窗口(SWND)是接收窗口(RWND)和拥塞窗户(CWND)中的较小值</li><li>发送开始的时候，定义拥塞窗口初始值为 IW(Initial Window) ，大小为 1个MSS（最大报文长度）</li></ul></li><li><p>慢开始</p><ul><li><p>TCP模块一开始并不清楚网络的实际情况，因为需要用一种试探的方式平滑地增加CWND的大小。但慢启动实际上并不慢，<strong>如果不加限制，慢启动必然使得CWND指数级增长，并最终导致网络拥塞</strong></p></li><li><p>为了避免网络拥塞，拥塞控制定义了<strong>慢启动门限</strong>(slow start threshold size)。当CWND大小超过该值时，TCP拥塞控制将进入拥塞避免阶段</p><ul><li>CWND &lt; SSTHRESH 慢开始算法 指数增大</li><li>CWND &gt; SSTHRESH 拥塞避免算法 加法增加</li><li>CWND &#x3D; SSTHRESH 两者即可<br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220625120133843.png" alt="image-20220625120133843"></li></ul></li></ul></li><li><p>拥塞避免</p><ul><li>SSTHRESH &#x3D; CWND &#x2F; 2</li><li>CWND &#x3D; MSS</li></ul></li><li><p>快速重传</p><ul><li>只要发送方收到三个重复确认（加上一个正常确认，总共发送了4个ACK报文），就立即重传确认序号指向的数据</li></ul></li><li><p>快速恢复</p><ul><li>当出现了快重传的情况时，就说明当前网络状况存在问题，但是又由于我们能够连续三次收到确认应答，就说明了当前的问题并不是很严重，没有必要重新进行慢开始</li><li>SSTHRESH &#x3D; CWND &#x2F; 2</li><li>CWND &#x3D; SSTHRESH</li><li>实行拥塞避免算法（跳过了慢开始）<br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220625121003361.png" alt="image-20220625121003361"></li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="TCP连接管理机制"><a href="#TCP连接管理机制" class="headerlink" title="TCP连接管理机制"></a>TCP连接管理机制</h3><ul><li><p>三次握手</p><ul><li><p>简单来说，Three-Way Handshake值得就是建立一个TCP连接时，需要客户端与服务端总共发送3个包，以确认双方的接受能力和发送能力是否正常，为后面的可靠性传输做准备。实质上就是连接服务器指定端口，建立TCP连接，并同步连接双方的序列号和确认号，交换TCP窗口大小信息</p></li><li><p>刚开始时，客户端处于关闭状态，服务端处于监听状态</p></li><li><p>🙋‍♂️第一次握手🙋‍♀️：给客户端发送一个SYN报文，并指明客户端的初始化序列号ISN。此时客户端处于<code>SYN_SENT</code>状态。首部的同步位SYN&#x3D;1,初始序号SEQ&#x3D;X,SYN&#x3D;1的报文段不携带数据，但要消耗掉一个序号</p></li><li><p>🙋‍♂️第二次握手🙋‍♀️：服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，并且也是指定了自己的初始化序列号 ISN(s)。同时会把客户端的 ISN + 1 作为ACK 的值，表示自己已经收到了客户端的 SYN，此时服务器处于 <code>SYN_RCVD</code> 的状态</p></li><li><p>🙋‍♂️第三次握手🙋‍♀️：客户端收到 SYN 报文之后，会发送一个 ACK 报文，当然，也是一样把服务器的 ISN + 1 作为 ACK 的值，表示已经收到了服务端的 SYN 报文，此时客户端处于 <code>ESTABLISHED</code> 状态。服务器收到 ACK 报文之后，也处于 <code>ESTABLISHED</code> 状态，此时，双方已建立起了连接</p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220625123244558.png" alt="image-20220625123244558" style="zoom:67%;" /></li><li><p>为什么是三次，两次不可以吗</p><ul><li>三次握手的意义<ul><li>第一次 确认 Client有发送能力</li><li>第二次 确认 Server有接受能力 和 发送能力</li><li>第三次 确认 Client有接受能力</li></ul></li><li>两次首先不能确保Client和Server都具备了发送接受能力，其次举个例子<ul><li>如客户端发出连接请求，但因连接请求报文丢失而未收到确认，于是客户端再重传一次连接请求。后来收到了确认，建立了连接。数据传输完毕后，就释放了连接，客户端共发出了两个连接请求报文段，其中第一个丢失，第二个到达了服务端，但是第一个丢失的报文段只是在某些网络结点长时间滞留了，延误到连接释放以后的某个时间才到达服务端，此时服务端误认为客户端又发出一次新的连接请求，于是就向客户端发出确认报文段，同意建立连接，不采用三次握手，只要服务端发出确认，就建立新的连接了，此时客户端忽略服务端发来的确认，也不发送数据，则服务端一致等待客户端发送数据，浪费资源</li></ul></li></ul></li><li><p>半连接队列</p><ul><li>Server第一次收到SYN后，处于SYN_RCVD状态。此时双方还没有建立完全连接，服务器会把这种状态下请求连接放在一个队列里，我们将其称为半连接队列</li></ul></li><li><p>ISN不是固定的，是动态生成的，避免黑客攻击</p></li><li><p>三次握手过程携带数据吗</p><ul><li>第一次和第二次不会携带数据，避免攻击者在SYN报文中塞入大量数据，使服务器崩溃</li><li>第三次可携带数据。此时客户端已处于ESTABLISED阶段</li></ul></li><li><p>SYN攻击</p><ul><li><p>Client在短时间内伪造大量不存在的IP地址，向Server不断发送SYN数据包。Server收到SYN数据包，做ACK确认，并等待Client确认，由于源地址是伪造的，并不存在，因此Server需要不断重复发送ACK。同时，伪造的SYN数据包长时间占用半连接队列，导致队列满被丢弃，引起网络拥塞甚至瘫痪</p></li><li><p>属于典型的DoS&#x2F;DDoS攻击</p></li><li><p>解决方法</p><ul><li>可通过命令来检测</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -n -p TCP | grep SYN_RECV</span><br></pre></td></tr></table></figure><ul><li>缩短超时时间</li><li>增加最大半连接数</li><li>使用SYN Cookies技术</li></ul></li></ul></li></ul></li><li><p>四次挥手</p><ul><li>用于终止一个TCP连接</li><li>刚开始时，双方均处于ESTABLISHED状态</li><li>🙋‍♂️第一次挥手🙋‍♀️：客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 <code>FIN_WAIT1</code> 状态。<br>即发出<strong>连接释放报文段</strong>（FIN&#x3D;1，序号seq&#x3D;u），并停止再发送数据，主动关闭TCP连接，进入FIN_WAIT1（终止等待1）状态，等待服务端的确认</li><li>🙋‍♂️第二次挥手🙋‍♀️：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 <code>CLOSE_WAIT</code> 状态</li><li>🙋‍♂️第三次挥手🙋‍♀️：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 <code>LAST_ACK</code> 的状态</li><li>🙋‍♂️第四次挥手🙋‍♀️：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于 <code>TIME_WAIT</code> 状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 <code>CLOSED</code> 状态，服务端收到 ACK 报文之后，就处于关闭连接了，处于 <code>CLOSED</code> 状态</li></ul><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220625144640860.png" alt="image-20220625144640860" style="zoom:67%;" /><ul><li>为什么是四次<ul><li>当服务端收到客户端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中<strong>ACK报文是用来应答的，SYN报文是用来同步的</strong>。但是关闭连接时，当服务端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉客户端，“你发的FIN报文我收到了”。<strong>只有等到我服务端所有的报文都发送完了，我才能发送FIN报文</strong>，因此不能一起发送。故需要四次挥手</li></ul></li><li>2MSL等待状态<ul><li>TIME_WAIT状态也成为2MSL等待状态。每个具体TCP实现必须选择一个报文段最大生存时间MSL（Maximum Segment Lifetime），它是任何报文段被丢弃前在网络内的最长时间。这个时间是有限的，因为TCP报文段以IP数据报在网络内传输，而IP数据报则有限制其生存时间的TTL字段</li></ul></li><li>等待2MSL的意义<ul><li>保证客户端发送的最后一个ACK报文段能够达到服务端</li><li>防止已失效的连接请求报文段出现在本连接中<ul><li>客户端在发送完最后一个ACK报文段后，再经过2MSL，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失，使下一个新的连接中不会出现这种旧的连接请求报文段</li></ul></li></ul></li></ul></li></ul><h3 id="TCP的有限状态机示意图"><a href="#TCP的有限状态机示意图" class="headerlink" title="TCP的有限状态机示意图"></a>TCP的有限状态机示意图</h3><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220625145317503.png" alt="image-20220625145317503"></p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220625145533080.png" alt="image-20220625145533080"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220625145545159.png" alt="image-20220625145545159"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220625145553012.png" alt="image-20220625145553012"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220625145600559.png" alt="image-20220625145600559"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220625145609467.png" alt="image-20220625145609467"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220625145617619.png" alt="image-20220625145617619"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220625145625882.png" alt="image-20220625145625882"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220625145632776.png" alt="image-20220625145632776"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220625145641796.png" alt="image-20220625145641796"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220625145648368.png" alt="image-20220625145648368"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;运输层&quot;&gt;&lt;a href=&quot;#运输层&quot; class=&quot;headerlink&quot; title=&quot;运输层&quot;&gt;&lt;/a&gt;运输层&lt;/h1&gt;&lt;h2 id=&quot;协议概述&quot;&gt;&lt;a href=&quot;#协议概述&quot; class=&quot;headerlink&quot; title=&quot;协议概述&quot;&gt;&lt;/a&gt;协议概</summary>
      
    
    
    
    <category term="面试" scheme="https://cheung0-bit.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="计算机网络" scheme="https://cheung0-bit.github.io/categories/%E9%9D%A2%E8%AF%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="计算机网络" scheme="https://cheung0-bit.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>网际层</title>
    <link href="https://cheung0-bit.github.io/a5656a05d09c/"/>
    <id>https://cheung0-bit.github.io/a5656a05d09c/</id>
    <published>2022-06-25T13:02:12.000Z</published>
    <updated>2022-11-25T06:51:00.159Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网际层"><a href="#网际层" class="headerlink" title="网际层"></a>网际层</h1><h2 id="网际协议IP"><a href="#网际协议IP" class="headerlink" title="网际协议IP"></a>网际协议IP</h2><p>网际协议IP是TCP&#x2F;IP体系中两个最主要的协议之一.</p><p>与之配套使用的还有四个协议:</p><ul><li>地址解析协议 ARP Address Resolution Protocol</li><li>逆地址解析协议 RARP Reverse Address Resolution Protocol</li><li>网际控制报文协议 ICMP Internet Control Message Protocol</li><li>网际组管理协议 IGMP Internet Group Management Protocol</li></ul><h3 id="虚拟互联网络"><a href="#虚拟互联网络" class="headerlink" title="虚拟互联网络"></a>虚拟互联网络</h3><ul><li>物理层中继系统 转发器</li><li>数据链路层中继系统 网桥</li><li>网络层中继系统 路由器</li><li>网络层以上的中继系统 网关</li></ul><h3 id="IP数据包格式"><a href="#IP数据包格式" class="headerlink" title="IP数据包格式"></a>IP数据包格式</h3><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/6-191106153044K1.gif" alt="IP数据报格式示意图"></p><ul><li>版本 : 有 4（IPv4）和 6（IPv6）两个值；</li><li>首部长度 : 占 4 位，因此最大值为 15。值为 1 表示的是 1 个 32 位字的长度，也就是 4 字节。因为固定部分长度为 20 字节，因此该值最小为 5。如果可选字段的长度不是 4 字节的整数倍，就用尾部的填充部分来填充。</li><li>区分服务 : 用来获得更好的服务，一般情况下不使用。</li><li>总长度 : 包括首部长度和数据部分长度。</li><li>生存时间 ：TTL，它的存在是为了防止无法交付的数据报在互联网中不断兜圈子。以路由器跳数为单位，当 TTL 为 0 时就丢弃数据报。</li><li>协议 ：指出携带的数据应该上交给哪个协议进行处理，例如 ICMP、TCP、UDP 等。</li><li>首部检验和 ：因为数据报每经过一个路由器，都要重新计算检验和，因此检验和不包含数据部分可以减少计算的工作量。</li><li>标识 : 在数据报长度过长从而发生分片的情况下，相同数据报的不同分片具有相同的标识符。</li><li>片偏移 : 和标识符一起，用于发生分片的情况。片偏移的单位为 8 字节。<ul><li>IP数据报分片</li></ul></li></ul><h3 id="分类的IP地址"><a href="#分类的IP地址" class="headerlink" title="分类的IP地址"></a>分类的IP地址</h3><ul><li>分类<br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/v2-13c1daebb7b5706a847f4e727d9dacde_r.jpg" alt="preview"></li><li>无分类<ul><li>无分类编址 CIDR 消除了传统 A 类、B 类和 C 类地址以及划分子网的概念，使用网络前缀和主机号来对 IP 地址进行编码，网络前缀的长度可以根据需要变化</li><li>一个 CIDR 地址块中有很多地址，一个 CIDR 表示的网络就可以表示原来的很多个网络，并且在路由表中只需要一个路由就可以代替原来的多个路由，减少了路由表项的数量。把这种通过使用网络前缀来减少路由表项的方式称为路由聚合，也称为 构成超网</li></ul></li></ul><h3 id="地址解析协议-ARP-与逆地址解析协议RARP"><a href="#地址解析协议-ARP-与逆地址解析协议RARP" class="headerlink" title="地址解析协议 ARP 与逆地址解析协议RARP"></a>地址解析协议 ARP 与逆地址解析协议RARP</h3><ul><li><p>ARP实现由IP地址得到MAC地址</p><ul><li>每个主机都有一个ARP高速缓存表,里面有本局域网上的各主机和路由器的IP地址到MAC地址的映射表</li><li>如果主机 A 知道主机 B 的 IP 地址，但是 ARP 高速缓存中没有该 IP 地址到 MAC 地址的映射，此时主机 A 通过广播的方式发送 ARP 请求分组，主机 B 收到该请求后会发送 ARP 响应分组给主机 A 告知其 MAC 地址，随后主机 A 向其高速缓存中写入主机 B 的 IP 地址到 MAC 地址的映射</li></ul></li><li><p>RARP 使只知道自己硬件地址的主机能够知道其 IP 地址(现已很少使用)</p></li></ul><h3 id="网际报文控制协议ICMP"><a href="#网际报文控制协议ICMP" class="headerlink" title="网际报文控制协议ICMP"></a>网际报文控制协议ICMP</h3><ul><li>ICMP 是为了更有效地转发 IP 数据报和提高交付成功的机会。它封装在 IP 数据报中，但是不属于高层协议\</li><li>ICMP的种类<ul><li>ICMP 差错报告报文<ul><li>终点不可达 </li><li>源点抑制(Source quench)  </li><li>时间超过 </li><li>参数问题 </li><li>改变路由（重定向）(Redirect)</li></ul></li><li>ICMP询问报文<ul><li>回送请求和回答报文</li><li>时间戳请求和回答报文</li></ul></li><li>应用<ul><li>Ping 测试连通性</li><li>Traceroute 跟踪一个分组从源点到终点的路径</li></ul></li></ul></li></ul><h2 id="路由选择协议"><a href="#路由选择协议" class="headerlink" title="路由选择协议"></a>路由选择协议</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>静态路由选择策略<ul><li>非自适应路由选择，其特点是简单和开销较小，但不能及时适应网络状态的变化</li></ul></li><li>动态路由选择策略<ul><li>自适应路由选择，其特点是能较好地适应网络状态的变化，但实现起来较为复杂，开销也比较大</li></ul></li></ul><h3 id="自治系统AS-Autonomous-System"><a href="#自治系统AS-Autonomous-System" class="headerlink" title="自治系统AS(Autonomous System)"></a>自治系统AS(Autonomous System)</h3><ul><li>在单一的技术管理下的一组路由器，而这些路由器使用一种 AS 内部的路由选择协议和共同的度量以确定分组在该 AS 内的路由，同时还使用一种 AS 之间的路由选择协议用以确定分组在 AS之间的路由</li></ul><h3 id="内部网关协议-IGP-Interior-Gateway-Protocol"><a href="#内部网关协议-IGP-Interior-Gateway-Protocol" class="headerlink" title="内部网关协议 IGP(Interior Gateway Protocol)"></a>内部网关协议 IGP(Interior Gateway Protocol)</h3><blockquote><p>在一个自治系统内部使用的路由选择协议</p></blockquote><ul><li>RIP<ul><li>RIP 是一种基于距离向量的路由选择协议。距离是指跳数，直接相连的路由器跳数为 1。跳数最多为 15，超过 15 表示不可达</li><li>RIP 按固定的时间间隔仅和相邻路由器交换自己的路由表，经过若干次交换之后，所有路由器最终会知道到达本自治系统中任何一个网络的最短距离和下一跳路由器地址</li></ul></li><li>OSPF<ul><li>向本自治系统中的所有路由器发送信息，这种方法是洪泛法</li><li>发送的信息就是与相邻路由器的链路状态，链路状态包括与哪些路由器相连以及链路的度量，度量用费用、距离、时延、带宽等来表示</li><li>只有当链路状态发生变化时，路由器才会发送信息</li></ul></li></ul><h3 id="外部网关协议BGP-External-Gateway-Protocol"><a href="#外部网关协议BGP-External-Gateway-Protocol" class="headerlink" title="外部网关协议BGP(External Gateway Protocol)"></a>外部网关协议BGP(External Gateway Protocol)</h3><ul><li>若源站和目的站处在不同的自治系统中，当数据报传到一个自治系统的边界时，就需要使用一种协议将路由选择信息传递到另一个自治系统中</li><li>AS 之间的路由选择很困难<ul><li>互联网规模很大；</li><li>各个 AS 内部使用不同的路由选择协议，无法准确定义路径的度量；</li><li>AS 之间的路由选择必须考虑有关的策略，比如有些 AS 不愿意让其它 AS 经过。</li></ul></li><li>BGP 只能寻找一条比较好的路由，而不是最佳路由</li><li>每个 AS 都必须配置 BGP 发言人，通过在两个相邻 BGP 发言人之间建立 TCP 连接来交换路由信息</li></ul><h3 id="无类别域间路由CIDR-Classless-Inter-Domain-Routing"><a href="#无类别域间路由CIDR-Classless-Inter-Domain-Routing" class="headerlink" title="无类别域间路由CIDR(Classless Inter-Domain Routing)"></a>无类别域间路由CIDR(Classless Inter-Domain Routing)</h3><ul><li><p>无类别域间路由（CIDR） CIDR是开发<strong>用于帮助减缓IP地址和路由表增大问题</strong>的一项技术<br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/2004486-20200510025702516-1476111227.png" alt="img"></p></li><li><p>超网合并</p><ul><li>超网(Super Netting)是与子网类似的概念，IP地址根据子网掩码被分为独立的网络地址和主机地址。与子网划分（把大网络分成若干小网络）相反，它是<strong>把一些小网络组合成一个大网络，就是超网</strong></li></ul><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/2269756-20210825171143297-161791354.png" alt="img"></p><ul><li>如上图，原本两个网段的网络部分不相同，子网掩码是&#x2F;24。将两个网段合并，与子网划分相反，掩码主机位增加，网络位减少，子网掩码向左移动一位，让两个网段的网络位部分相同。合并之后的子网掩码是255.255.254.0，网段是192.168.0.0&#x2F;23.而且合并之后192.168.0.255也可以作为正常IP使用，不再是广播地址，因为其主机位已经不都是1了。（主机位多了一位0）</li><li>网段合并规律<ul><li>将子网掩码向左移动N位，合并2的N次方个网段。即子网掩码左移1位能够将能够合并两个网段，左移2位，能够合并四个网段，左移3位，能够合并8个网段</li></ul></li></ul></li></ul><h3 id="IP多播"><a href="#IP多播" class="headerlink" title="IP多播"></a>IP多播</h3><ul><li>与单播相比，在一对多的通信中，多播可大大节省网络资源<br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220625161948298.png"></li></ul><h2 id="虚拟专用网VPN和网络地址转换-NAT"><a href="#虚拟专用网VPN和网络地址转换-NAT" class="headerlink" title="虚拟专用网VPN和网络地址转换 NAT"></a>虚拟专用网VPN和网络地址转换 NAT</h2><ul><li><p>VPN</p><ul><li><p>由于 IP 地址的紧缺，一个机构能申请到的 IP 地址数往往远小于本机构所拥有的主机数。并且一个机构并不需要把所有的主机接入到外部的互联网中，机构内的计算机可以使用仅在本机构有效的 IP 地址（专用地址）。</p><ul><li>有三个专用地址块：<ul><li>10.0.0.0 ~ 10.255.255.255</li><li>172.16.0.0 ~ 172.31.255.255</li><li>192.168.0.0 ~ 192.168.255.255</li></ul></li></ul></li><li><p>VPN 使用公用的互联网作为本机构各专用网之间的通信载体。专用指机构内的主机只与本机构内的其它主机通信；虚拟指好像是，而实际上并不是，它有经过公用的互联网</p></li><li><p>VPN的实现主要使用了两种基本技术:<strong>隧道传输</strong>和<strong>加密技术</strong></p><ul><li>VPN定义了两个内部网络的路由器之间通过Internet建立的通信隧道，使用IP-in-IP封装后在隧道中转发数据报</li><li>为了保证保密性，隧道发送路由器把内网IP数据报加密后，封装为外网IP数据报的数据部分在外网中进行传输</li><li>隧道接收路由器收到数据报后，从外网数据报中取出数据部分，将数据报解密，还原成内网数据报，然后转发该数据报</li></ul><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624165557945.png" alt="image-20220624165557945"></p></li><li><p>VPN的分类</p><ul><li>内联网VPN：只是机构内部网络所构成的VPN</li><li>外联网VPN：有时一个机构的VPN需要又某些外部机构参加进来，这样的VPN即为外联网VPN</li><li>远程接入VPN：公司员工在外地接入公司的VPN，即可远程接入VPN</li></ul></li></ul></li><li><p>NAT</p><ul><li><p>显然为每个主机再申请一个全球IP地址是不现实的，需要使用<strong>网络地址转换（Network Address Translation）技术</strong></p><ul><li>这种方法需要在专用网连接到因特网的路由器上安装NAT软件，装有 NAT 软件的路由器叫做 NAT路由器，它至少有一个有效的外部全球地址 IP</li><li>所有使用本地IP地址的主机在和外界通信时都要在 NAT 路由器上将其本地IP地址转换成外网 IP才能和因特网连接</li></ul><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624201909104.png"></p><ul><li>为了更有效的利用NAT路由器的全球IP地址，将传输层的端口号也利用上，这样就可使多个专用网内的主机同时公用一个NAT路由器的全球IP地址，此时叫做<strong>网络地址与端口号转换NAPT（Network Address and Port Translation）</strong></li></ul></li></ul></li></ul><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624202154348.png" alt="image-20220624202154348"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624202232812.png" alt="image-20220624202232812"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624203254275.png" alt="image-20220624203254275"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624203912640.png" alt="image-20220624203912640"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624204143794.png" alt="image-20220624204143794"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624205214717.png" alt="image-20220624205214717"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624205723172.png" alt="image-20220624205723172"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624205745971.png" alt="image-20220624205745971"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624205802040.png" alt="image-20220624205802040"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624205810343.png" alt="image-20220624205810343"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;网际层&quot;&gt;&lt;a href=&quot;#网际层&quot; class=&quot;headerlink&quot; title=&quot;网际层&quot;&gt;&lt;/a&gt;网际层&lt;/h1&gt;&lt;h2 id=&quot;网际协议IP&quot;&gt;&lt;a href=&quot;#网际协议IP&quot; class=&quot;headerlink&quot; title=&quot;网际协议IP&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="面试" scheme="https://cheung0-bit.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="计算机网络" scheme="https://cheung0-bit.github.io/categories/%E9%9D%A2%E8%AF%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="计算机网络" scheme="https://cheung0-bit.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>数据链路层</title>
    <link href="https://cheung0-bit.github.io/e7adefa34d04/"/>
    <id>https://cheung0-bit.github.io/e7adefa34d04/</id>
    <published>2022-06-25T13:01:33.000Z</published>
    <updated>2022-11-25T06:50:50.661Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><h2 id="数据链路层的基本概念"><a href="#数据链路层的基本概念" class="headerlink" title="数据链路层的基本概念"></a>数据链路层的基本概念</h2><ul><li>结点：数据链路层上的结点主要是主机和路由器。由物理线路联接起来的两个结点，又叫相邻结点</li><li>链路：网络中两个结点之间的物理通道，链路的传输介质主要有双绞线、光纤和微波。分为有线链路、无线链路</li><li>数据链路：两络中两个结点之间的逻辑通道，把实现控制数据传输协议的硬件和软件加到链路上就构成数据链路</li><li>帧：链路层的协议数据单元，作用是封装网络层数据报</li></ul><h2 id="差错检测"><a href="#差错检测" class="headerlink" title="差错检测"></a>差错检测</h2><h3 id="CRC"><a href="#CRC" class="headerlink" title="CRC"></a>CRC</h3><blockquote><p><a href="https://so.csdn.net/so/search?q=CRC&spm=1001.2101.3001.7020">CRC</a>(Cyclic Redundancy Check)，即循环冗余校核，是一种根据网络数据包或电脑文件等数据产生简短固定位数校核码的快速算法，主要用来检测或校核数据传输或者保存后可能出现的错误。CRC利用除法及余数的原理，实现错误侦测的功能，具有原理清晰、实现简单等优点</p></blockquote><p>观看<a href="https://www.bilibili.com/video/BV1V4411Z7VA?spm_id_from=333.337.search-card.all.click&vd_source=8d8360de53c055be8fcd9bc677712e0e">B站教学视频</a></p><p>举例说明：</p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220623160721934.png" alt="image-20220623160721934"></p><h2 id="点到点链路的停止-等待协议"><a href="#点到点链路的停止-等待协议" class="headerlink" title="点到点链路的停止&#x2F;等待协议"></a>点到点链路的停止&#x2F;等待协议</h2><blockquote><p>停止等待协议（stop-and-wait）是最简单但也是最基础的<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/4329290">数据链路层</a>协议。很多有关协议的基本概念都可以从这个协议中学习到。停止等待就是每发送完一个分组就停止发送，等待对方的确认。在收到确认后再发送下一个分组。</p></blockquote><h3 id="无差错情况"><a href="#无差错情况" class="headerlink" title="无差错情况"></a>无差错情况</h3><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624132657828.png" alt="image-20220624132657828"></p><h3 id="有差错情况"><a href="#有差错情况" class="headerlink" title="有差错情况"></a>有差错情况</h3><p>每发完一个数据帧时，必须保留它的副本。数据帧和确认帧必须编号。每当发送一个帧时就启动一个计时器。</p><ul><li><p>数据帧丢失或出错<br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624132753152.png" alt="image-20220624132753152"></p></li><li><p>ACK丢失<br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624132837149.png" alt="image-20220624132837149"></p></li><li><p>ACK迟到<br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624132934591.png" alt="image-20220624132934591"></p></li></ul><h3 id="信道利用率"><a href="#信道利用率" class="headerlink" title="信道利用率"></a>信道利用率</h3><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624133026776.png" alt="image-20220624133026776"></p><h3 id="SW协议的缺点及改进方向"><a href="#SW协议的缺点及改进方向" class="headerlink" title="SW协议的缺点及改进方向"></a>SW协议的缺点及改进方向</h3><ul><li>缺点: 信道远远没有被数据比特填满</li><li>改进方向: 产生了两种协议,连续ARQ和选择重传ARQ</li></ul><h2 id="滑动窗口协议，连续ARQ与选择重传ARQ"><a href="#滑动窗口协议，连续ARQ与选择重传ARQ" class="headerlink" title="滑动窗口协议，连续ARQ与选择重传ARQ"></a>滑动窗口协议，连续ARQ与选择重传ARQ</h2><blockquote><p>滑动窗口协议（Sliding Window Protocol），属于TCP协议的一种应用，用于网络数据传输时的<a href="https://so.csdn.net/so/search?q=%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6&spm=1001.2101.3001.7020">流量控制</a>，以避免拥塞的发生。该协议允许发送方在停止并等待确认前发送多个数据分组。由于发送方不必每发一个分组就停下来等待确认，因此该协议可以加速数据的传输，提高网络吞吐量</p></blockquote><p>当发送方发送大量的数据包时，接收方并不一定有能力全部接受。为解决这一矛盾，窗口控制应运而生。</p><p>既有窗口控制，便有发送窗口和接收窗口</p><p>当发送窗口和接收窗口的大小均为1时，该窗口协议就是等待重传协议了，故等待重传协议也叫做ARQ（Automatic Re Transmission Query）</p><p>但普通的ARQ信道利用率太低，当发生发送数据包丢失或ACK丢失等时，便会发生超时重传，这样RTT时间会大大增多，使得信道利用率大大降低，便有了连续ARQ和选择重传ARQ</p><h3 id="连续ARQ"><a href="#连续ARQ" class="headerlink" title="连续ARQ"></a>连续ARQ</h3><p>此时，我们增大发送窗口。大小区间为  <code>( 1, pow(2, n) - 1 ]</code></p><p>其中n为传输数据的bit数量</p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624114620303.png" alt="image-20220624114620303"></p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624114738737.png" alt="image-20220624114738737"></p><p>当某一个数据帧出错时，即使后面的N个数据帧正确到达，也要被被丢弃。并返回最后一个正确返回的ACK，提示发送方从第一个出错的数据帧处重新发送。<strong>因此，连续ARQ也被称为回退N帧协议（Go-Back-N）</strong></p><h3 id="选择重传ARQ"><a href="#选择重传ARQ" class="headerlink" title="选择重传ARQ"></a>选择重传ARQ</h3><p>连续ARQ的缺点也非常明显，当数据帧出错时，发送方会回退N帧进行重传，浪费了时间。</p><p>为解决这一问题，加大接收窗口和接收缓存，<strong>以空间换时间</strong></p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624115611659.png" alt="image-20220624115611659"></p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624115628533.png" alt="image-20220624115628533"></p><h2 id="使用广播信道的数据链路层（CSMA-CD）"><a href="#使用广播信道的数据链路层（CSMA-CD）" class="headerlink" title="使用广播信道的数据链路层（CSMA&#x2F;CD）"></a>使用广播信道的数据链路层（CSMA&#x2F;CD）</h2><h3 id="局域网的数据链路层"><a href="#局域网的数据链路层" class="headerlink" title="局域网的数据链路层"></a>局域网的数据链路层</h3><ul><li>局域网是一种典型的广播信道，主要特点是网络为一个单位所拥有，且地理范围和站点数目均有限</li><li>主要有以太网、令牌环网、FDDI 和 ATM 等局域网技术，目前以太网占领着有线局域网市场</li><li>可以按照网络拓扑结构对局域网进行分类：<ul><li>星形网</li><li>环形网</li><li>总线网</li><li>树形网</li></ul></li><li>数据链路层的两个子层<ul><li>逻辑链路控制 LLC (Logical Link Control)子层  <ul><li>LLC子层与传输媒体无关,一般不考虑LLC子层</li></ul></li><li>媒体接入控制 MAC (Medium Access Control)子层<ul><li>决定谁获得媒体的使用权,即解决<strong>信道分配</strong>问题</li></ul></li></ul></li><li>适配器<ul><li>网络接口板又称为通信适配器(adapter)或网络接口卡 NIC (Network Interface Card)，或“网卡”</li><li>主要功能<ul><li>进行串行&#x2F;并行转换</li><li>对数据进行缓存</li><li>在计算机的操作系统安装设备驱动程序</li><li>实现以太网协议</li></ul></li></ul></li></ul><h3 id="CSMA-CD协议"><a href="#CSMA-CD协议" class="headerlink" title="CSMA&#x2F;CD协议"></a>CSMA&#x2F;CD协议</h3><ul><li><p>CSMA (Carries Sense Multiple Access) 是一种具有信道检测功能的分布式介质访问控制方法</p></li><li><p>在坚持CSMA的基础上增加冲突检测CD(Collision Detection)</p></li><li><p>CSMA&#x2F;CD 表示载波监听多点接入&#x2F;碰撞检测</p><ul><li>多点接入: 说明这是总线型网络,许多主机以多点的方式连接到总线上</li><li>载波监听: 每个主机必须不停的监听信道.在发送前,如果监听到信道正在使用,就必须等待</li><li>碰撞检测: 在发送中, 如果监听到信道已有其他主机正在发送数据,就表示发生了碰撞.虽然每个主机在发送数据之前都已经监听到信道为空闲,但是由于电磁波的传播时延的存在,还是有可能会发生碰撞</li></ul></li><li><p>具体实现</p><ul><li>记端到端的传播时延为 τ，最先发送的站点最多经过 2τ 就可以知道是否发生了碰撞，称 2τ 为 争用期 。只有经过争用期之后还没有检测到碰撞，才能肯定这次发送不会发生碰撞</li><li>当发生碰撞时，站点要停止发送，等待一段时间再发送。这个时间采用 截断二进制指数退避算法 来确定。从离散的整数集合 {0, 1, .., (pow(2,k)-1)} 中随机取出一个数，记作 r，然后取 r 倍的争用期作为重传等待时间</li><li>当重传达 16 次仍不能成功时即丢弃该帧，并向高层报告</li></ul></li></ul><h2 id="以太网"><a href="#以太网" class="headerlink" title="以太网"></a>以太网</h2><blockquote><p>以太网是一种<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%B1%80%E5%9F%9F%E7%BD%91/5456521">计算机局域网</a>技术。<a href="https://baike.baidu.com/item/IEEE">IEEE</a>组织的[IEEE 802.3](<a href="https://baike.baidu.com/item/IEEE">https://baike.baidu.com/item/IEEE</a> 802.3&#x2F;3684685)标准制定了以太网的技术标准，它规定了包括<a href="https://baike.baidu.com/item/%E7%89%A9%E7%90%86%E5%B1%82">物理层</a>的连线、电子信号和介质访问层<a href="https://baike.baidu.com/item/%E5%8D%8F%E8%AE%AE/13020269">协议</a>的内容。以太网是应用最普遍的局域网技术，取代了其他局域网技术如<a href="https://baike.baidu.com/item/%E4%BB%A4%E7%89%8C%E7%8E%AF">令牌环</a>、<a href="https://baike.baidu.com/item/FDDI">FDDI</a>和<a href="https://baike.baidu.com/item/ARCNET">ARCNET</a></p></blockquote><p>简单来说,以太网就是一种规范局域网如何工作的标准,也是现在最流行最普及的一套解决方案</p><h3 id="使用广播信道的以太网"><a href="#使用广播信道的以太网" class="headerlink" title="使用广播信道的以太网"></a>使用广播信道的以太网</h3><ul><li>使用集线器的星形拓扑<ul><li>传统以太网最初是使用粗同轴电缆，后来演进到使用比较便宜的细同轴电缆，最后发展为使用更便宜和更灵活的双绞线</li><li>这种以太网采用星形拓扑，在星形的中心则增加了一种可靠性非常高的设备，叫做集线器(hub)</li></ul></li><li>以太网的信道利用率<ul><li>一个帧从开始发送，经可能发生的碰撞后，将再重传数次，到发送成功且信道转为空闲(即再经过时间 τ  使得信道上无信号在传播)时为止，是发送一帧所需的平均时间</li><li><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624140834140.png" alt="image-20220624140834140"></li></ul></li><li>以太网的MAC层<ul><li>MAC 地址是链路层地址，长度为 6 字节（48 位），用于唯一标识网络适配器（网卡）</li><li>一台主机拥有多少个网络适配器就有多少个 MAC 地址。例如笔记本电脑普遍存在无线网络适配器和有线网络适配器，因此就有两个 MAC 地址</li></ul></li><li>以太网帧格式<ul><li>类型 标记上层使用的协议</li><li>数据 长度在46-1500之间 如果太小则需要填充</li><li>FCS 帧检验序列 使用的是CRC检验方法<br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/6-191106130541362.gif" alt="以太帧结构（格式）"></li></ul></li></ul><h3 id="扩展的以太网"><a href="#扩展的以太网" class="headerlink" title="扩展的以太网"></a>扩展的以太网</h3><ul><li>在物理层上扩展<ul><li>用集线器组成更大的局域网都在一个碰撞域中<ul><li>优点<ul><li>使原来属于不同碰撞域的局域网上的计算机能够进行跨碰撞域的通信</li><li>扩大了局域网覆盖的地理范围</li></ul></li><li>缺点<ul><li>碰撞域增大了，但总的吞吐量并未提高</li><li>如果不同的碰撞域使用不同的数据率，那么就不能用集线器将它们互连起来</li></ul></li></ul></li></ul></li><li>在数据链路层扩展以太网<ul><li>在数据链路层扩展局域网是使用网桥<ul><li>网桥工作在数据链路层，它根据 MAC 帧的目的地址对收到的帧进行转发.网桥具有过滤帧的功能。当网桥收到一个帧时，并不是向所有的接口转发此帧，而是先检查此帧的目的 MAC 地址，然后再确定将该帧转发到哪一个接口 <ul><li>优点<ul><li>过滤通信量</li><li>扩大了物理范围</li><li>提高了可靠性</li><li>可互连不同物理层、不同 MAC 子层和不同速率（如10 Mb&#x2F;s 和 100 Mb&#x2F;s 以太网）的局域网</li></ul></li><li>缺点<ul><li>存储转发增加了时延</li><li>在MAC 子层并没有流量控制功能 </li><li>具有不同 MAC 子层的网段桥接在一起时时延更大</li><li>网桥只适合于用户数不太多(不超过几百个)和通信量不太大的局域网，否则有时还会因传播过多的广播信息而产生网络拥塞。这就是所谓的广播风暴</li></ul></li></ul></li></ul></li><li>交换机<ul><li>交换机具有自学习能力，学习的是交换表的内容，交换表中存储着 MAC 地址到接口的映射.正是由于这种自学习能力，因此交换机是一种即插即用设备，不需要网络管理员手动配置交换表内容</li></ul></li></ul></li></ul><h2 id="虚拟局域网"><a href="#虚拟局域网" class="headerlink" title="虚拟局域网"></a>虚拟局域网</h2><ul><li>虚拟局域网可以建立与物理位置无关的逻辑组，只有在同一个虚拟局域网中的成员才会收到链路层广播信息。</li><li>使用 VLAN 干线连接来建立虚拟局域网，每台交换机上的一个特殊接口被设置为干线接口，以互连 VLAN 交换机。IEEE 定义了一种扩展的以太网帧格式 802.1Q，它在标准以太网帧上加进了 4 字节首部 VLAN 标签，用于表示该帧属于哪一个虚拟局域网</li></ul><h2 id="无线局域网"><a href="#无线局域网" class="headerlink" title="无线局域网"></a>无线局域网</h2><h3 id="WLAN-Wireless-Local-Area-Network"><a href="#WLAN-Wireless-Local-Area-Network" class="headerlink" title="WLAN(Wireless Local Area Network)"></a>WLAN(Wireless Local Area Network)</h3><ul><li>采用无线通信技术的局域网</li><li>提供了移动接入的功能</li><li>节省投资,建网速度较快</li><li>支持便携设备联网</li></ul><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624142925658.png" alt="image-20220624142925658"></p><h3 id="CSMA-CA协议"><a href="#CSMA-CA协议" class="headerlink" title="CSMA&#x2F;CA协议"></a>CSMA&#x2F;CA协议</h3><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624143016641.png" alt="image-20220624143016641"><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624143054537.png" alt="image-20220624143054537"><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624143112691.png" alt="image-20220624143112691"><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624143139558.png" alt="image-20220624143139558"></p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624143308295.png" alt="image-20220624143308295"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624152314525.png" alt="image-20220624152314525"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624143317408.png" alt="image-20220624143317408"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624143325845.png" alt="image-20220624143325845"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624152224057.png" alt="image-20220624152224057"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624143335861.png"><br>    0比特填充法,5个连续1后添加0<br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624143355422.png" alt="image-20220624143355422"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624152134129.png" alt="image-20220624143402657"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624143410365.png" alt="image-20220624143410365"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624143417666.png" alt="image-20220624143417666"><br>    接受窗口同时受发送窗口的限制<br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624143425418.png" alt="image-20220624143425418"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624152336193.png" alt="image-20220624152336193"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624152534267.png" alt="image-20220624152534267"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624152559825.png" alt="image-20220624152559825"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624152630973.png" alt="image-20220624152630973"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624152722078.png" alt="image-20220624152722078"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624152748287.png" alt="image-20220624152748287"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624152813003.png" alt="image-20220624152813003"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624152833066.png" alt="image-20220624152833066"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624152850835.png" alt="image-20220624152850835"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624152857936.png" alt="image-20220624152857936"><br><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220624153442595.png" alt="image-20220624153442595"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据链路层&quot;&gt;&lt;a href=&quot;#数据链路层&quot; class=&quot;headerlink&quot; title=&quot;数据链路层&quot;&gt;&lt;/a&gt;数据链路层&lt;/h1&gt;&lt;h2 id=&quot;数据链路层的基本概念&quot;&gt;&lt;a href=&quot;#数据链路层的基本概念&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="面试" scheme="https://cheung0-bit.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="计算机网络" scheme="https://cheung0-bit.github.io/categories/%E9%9D%A2%E8%AF%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="计算机网络" scheme="https://cheung0-bit.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>物理层</title>
    <link href="https://cheung0-bit.github.io/25415794e71f/"/>
    <id>https://cheung0-bit.github.io/25415794e71f/</id>
    <published>2022-06-25T13:00:14.000Z</published>
    <updated>2022-11-25T06:50:37.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h1><h2 id="传输媒体介质"><a href="#传输媒体介质" class="headerlink" title="传输媒体介质"></a>传输媒体介质</h2><ul><li>双绞线</li><li>同轴电缆</li><li>光纤</li></ul><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220623143853238.png" alt="image-20220623143853238"></p><h2 id="数据通信的基础知识（存储转发、奈奎斯特准则-香农公式）"><a href="#数据通信的基础知识（存储转发、奈奎斯特准则-香农公式）" class="headerlink" title="数据通信的基础知识（存储转发、奈奎斯特准则 香农公式）"></a>数据通信的基础知识（存储转发、奈奎斯特准则 香农公式）</h2><h3 id="存储转发"><a href="#存储转发" class="headerlink" title="存储转发"></a>存储转发</h3><blockquote><p>存储转发计算机网络领域使用得最为广泛的技术之一，以太网交换机的控制器先将输入端口到来的数据包缓存起来，先检查数据包是否正确，并过滤掉冲突包错误</p></blockquote><h3 id="奈奎斯特准则"><a href="#奈奎斯特准则" class="headerlink" title="奈奎斯特准则"></a>奈奎斯特准则</h3><p>奈奎斯特定理又称奈氏准则，它指出在理想低筒（没有噪声、带宽有限）的信道中，极限码元传输率为2W波特，其中W是理想低通信道的带宽，单位是Hz</p><p>若用V表示每个码元离散电平的数目（码元的离散电平数目是指由多少种不同的码元，比如有16种不同的码元，则需要4位二进制位，因此数据传输率是码元传输率的四倍）<br>$$<br>理想信道下的极限数据传输率 &#x3D; 2Wlog2V<br>$$</p><h3 id="香农公式"><a href="#香农公式" class="headerlink" title="香农公式"></a>香农公式</h3><p>香农定理给出了带宽受限且有高斯白噪声干扰的信道的极限数据传输率，当用此速率进行传输时，可以做到不产生误差<br>$$<br>信道的极限数据传输率 &#x3D; Wlog2(1 + S&#x2F;N)<br>$$</p><h2 id="信道复用技术"><a href="#信道复用技术" class="headerlink" title="信道复用技术"></a>信道复用技术</h2><h3 id="码分复用"><a href="#码分复用" class="headerlink" title="码分复用"></a>码分复用</h3><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220623145256249.png" alt="image-20220623145256249"></p><h3 id="频分复用"><a href="#频分复用" class="headerlink" title="频分复用"></a>频分复用</h3><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220623145429802.png" alt="image-20220623145429802"></p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220623145528691.png" alt="image-20220623145528691"></p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220623153535913.png" alt="image-20220623153535913"></p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220623145555491.png" alt="image-20220623145555491"></p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220623145605681.png" alt="image-20220623145605681"></p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220623145615501.png" alt="image-20220623145615501"></p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220623145623946.png" alt="image-20220623145623946"></p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220623145630838.png" alt="image-20220623145630838"></p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220623145638620.png" alt="image-20220623145638620"></p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220623153446623.png" alt="image-20220623153446623"></p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220623145646162.png" alt="image-20220623145646162"></p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220623153554922.png" alt="image-20220623153554922"></p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220623145654912.png" alt="image-20220623145654912"></p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220623153629568.png" alt="image-20220623153629568"></p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220623145701868.png" alt="image-20220623145701868"></p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220623153609191.png" alt="image-20220623153609191"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;物理层&quot;&gt;&lt;a href=&quot;#物理层&quot; class=&quot;headerlink&quot; title=&quot;物理层&quot;&gt;&lt;/a&gt;物理层&lt;/h1&gt;&lt;h2 id=&quot;传输媒体介质&quot;&gt;&lt;a href=&quot;#传输媒体介质&quot; class=&quot;headerlink&quot; title=&quot;传输媒体介质&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="面试" scheme="https://cheung0-bit.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="计算机网络" scheme="https://cheung0-bit.github.io/categories/%E9%9D%A2%E8%AF%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="计算机网络" scheme="https://cheung0-bit.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络概述</title>
    <link href="https://cheung0-bit.github.io/ee2637ed767b/"/>
    <id>https://cheung0-bit.github.io/ee2637ed767b/</id>
    <published>2022-06-25T12:59:18.000Z</published>
    <updated>2022-11-25T06:50:18.750Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机网络基本概念"><a href="#计算机网络基本概念" class="headerlink" title="计算机网络基本概念"></a>计算机网络基本概念</h1><h2 id="计算机网络的概念和特点"><a href="#计算机网络的概念和特点" class="headerlink" title="计算机网络的概念和特点"></a>计算机网络的概念和特点</h2><ul><li>概念：计算机网络是一些互相连接的、自治的计算机的集合，是将不同地理位置上的具有独立功能的多个计算机系统用通信线路相互连接起来，在协议的控制之下，以实现资源共享和数据通信为目的的系统</li><li>特点<ul><li>连通性Connectivity</li><li>共享 Sharing</li></ul></li></ul><h2 id="互联网定义"><a href="#互联网定义" class="headerlink" title="互联网定义"></a>互联网定义</h2><ul><li><strong>互联网，特指</strong> <strong>Internet</strong>，起源于美国，是由数量极大的<strong>各种计算机网络</strong>互连起来而形成的一个互连网络</li><li><strong>采用</strong> <strong>TCP&#x2F;IP</strong> <strong>协议族</strong>，是一个覆盖全球、实现全球范围内数据通信和资源共享的计算机网络</li></ul><h2 id="计算机网络的性能（网络性能指标）"><a href="#计算机网络的性能（网络性能指标）" class="headerlink" title="计算机网络的性能（网络性能指标）"></a>计算机网络的性能（网络性能指标）</h2><ul><li><p>带宽 bandwidth </p><ul><li>原指信号具有的频带宽度，单位是赫</li><li>现指数字信道所能传送的“最高数据率”的同义语，单位是“比特每秒”或“b&#x2F;s(bit&#x2F;s)”</li><li>单位换算</li></ul></li></ul><table><thead><tr><th align="center">千比每秒</th><th align="center">kb&#x2F;s</th><th align="center">10^3 b&#x2F;s</th></tr></thead><tbody><tr><td align="center"><strong>兆比每秒</strong></td><td align="center"><strong>Mb&#x2F;s</strong></td><td align="center"><strong>10^6 b&#x2F;s</strong></td></tr><tr><td align="center"><strong>吉比每秒</strong></td><td align="center"><strong>Gb&#x2F;s</strong></td><td align="center"><strong>10^9 b&#x2F;s</strong></td></tr><tr><td align="center"><strong>太比每秒</strong></td><td align="center"><strong>Tb&#x2F;s</strong></td><td align="center"><strong>10^12 b&#x2F;s</strong></td></tr></tbody></table><ul><li><p>时延 delay</p><ul><li><p>指数据（一个报文或者分组，甚至比特）从网络（或链路）的一端点传送到另一端你所需的时间。有时也称为延迟或者迟延</p></li><li><p>网络中时延由以下组成</p><ul><li>发送时延（传输时延）</li></ul><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220623140836434.png" alt="image-20220623140836434"></p><ul><li>传播时延</li></ul><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220623140954002.png" alt="image-20220623140954002"></p><ul><li>处理时延</li></ul><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220623141024079.png" alt="image-20220623141024079"></p><ul><li>排队时延</li></ul><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220623141052985.png" alt="image-20220623141052985"></p></li><li><p>总时延 &#x3D; 发送时延 + 传播时延 + 处理时延 + 排队时延</p></li><li><p>对于高速网络链路，我们提高的仅仅是数据的<code>发送速率</code>，而不是比特在链路上的<code>传播速率</code></p></li><li><p>提高链路带宽能够减小数据的发送时延</p></li><li><p>往返时延RTT（Round-Trip Time）表示从发送端发送数据开始，到发送端收到来自接收端的确认（接收端收到数据后立即发送确认），总共经历的时延</p></li></ul></li><li><p>吞吐量 Throughput</p><ul><li>表示在单位时间内通过某个网络（或信道、接口）的数据量</li><li>吞吐量更经常地用于对现实世界中的网络的一种测量，以便知道实际上到底有多少数据量能够通过网络</li><li>吞吐量受网络的带宽的限制</li></ul></li><li><p>利用率</p><ul><li>信道利用率<ul><li>指某信道有百分之几的时间是被利用的（有数据通过）</li><li>完全空闲的信道的利用率是零</li><li>信道利用率并非越高越好。当某信道的利用率增大时，该信道引起的时延也就迅速增加</li></ul></li><li>网络利用率<ul><li>是全网络的信道利用率的加权平均值</li></ul></li></ul></li></ul><h2 id="网络体系结构（协议的三个要素）"><a href="#网络体系结构（协议的三个要素）" class="headerlink" title="网络体系结构（协议的三个要素）"></a>网络体系结构（协议的三个要素）</h2><p><strong>网络体系的实现基于“分而治之”的伟大思想</strong></p><h3 id="分层的好处"><a href="#分层的好处" class="headerlink" title="分层的好处"></a>分层的好处</h3><ul><li>独立性：每一层都实现了一个相对独立的功能，提供一种相对独立的服务。某一层无须知道下一层的具体实现，只需要指导如何使用下层服务即可</li><li>灵活性：任意一层内部实现发生变化，只要接口不变，对其他层没有影响。每一层都可以独立发展</li><li>可分割：各层可以自主选择最好的技术实现</li><li>易于实现：整个系统分成若干小的子系统，实现和维护的难度大大降低</li><li>易于标准化：每一层都有了明确的规定</li><li></li></ul><h3 id="三要素"><a href="#三要素" class="headerlink" title="三要素"></a>三要素</h3><ul><li><strong>语法</strong> 数据与控制信息（消息）的结构或格式 </li><li><strong>语义</strong> 需要发出何种控制信息，完成何种动作以及做出何种响应</li><li><strong>同步</strong> 事件实现顺序的详细说明</li></ul><h3 id="参考模型"><a href="#参考模型" class="headerlink" title="参考模型"></a>参考模型</h3><ul><li>OSI</li><li>TCP&#x2F;IP</li></ul><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220623142944305.png" alt="image-20220623142944305"></p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220623143032126.png" alt="image-20220623143032126"></p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220623143104892.png" alt="image-20220623143104892"></p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220623143239409.png" alt="image-20220623143239409"></p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220623143310150.png" alt="image-20220623143310150"></p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220623143408822.png" alt="image-20220623143408822"></p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220623143432001.png" alt="image-20220623143432001"></p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220623143508232.png" alt="image-20220623143508232"></p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220623143531969.png" alt="image-20220623143531969"></p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220623143621860.png" alt="image-20220623143621860"></p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220623143640654.png" alt="image-20220623143640654"></p><p><img src="https://0-bit.oss-cn-beijing.aliyuncs.com/image-20220623143658858.png" alt="image-20220623143658858"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;计算机网络基本概念&quot;&gt;&lt;a href=&quot;#计算机网络基本概念&quot; class=&quot;headerlink&quot; title=&quot;计算机网络基本概念&quot;&gt;&lt;/a&gt;计算机网络基本概念&lt;/h1&gt;&lt;h2 id=&quot;计算机网络的概念和特点&quot;&gt;&lt;a href=&quot;#计算机网络的概念和特点&quot; c</summary>
      
    
    
    
    <category term="面试" scheme="https://cheung0-bit.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="计算机网络" scheme="https://cheung0-bit.github.io/categories/%E9%9D%A2%E8%AF%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="计算机网络" scheme="https://cheung0-bit.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>创建者模式---单例模式</title>
    <link href="https://cheung0-bit.github.io/0968e32e99cb/"/>
    <id>https://cheung0-bit.github.io/0968e32e99cb/</id>
    <published>2022-04-14T12:53:58.000Z</published>
    <updated>2022-11-25T06:47:56.572Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 创建者模式的主要关注点是”怎样创建对象”，主要特点是”将对象的创建与使用分离”</p></blockquote><p>这样降低了系统耦合度，使用者不需要关注对象的创建细节。</p><p>创建者模式分为：</p><ul><li>单例模式</li><li>工厂方法模式</li><li>抽象工程模式</li><li>原型模式</li><li>建造者模式</li></ul><p>今天先学习一下<strong>单例模式</strong></p><h2 id="什么是单例设计模式（Singleton-Pattern）"><a href="#什么是单例设计模式（Singleton-Pattern）" class="headerlink" title="什么是单例设计模式（Singleton Pattern）"></a>什么是单例设计模式（Singleton Pattern）</h2><p>单例设计模式是Java中最简单的设计模式之一。属于创建型模式，提供了创建对象的最佳方式。</p><p>该模式涉及到一个单一的类，该类负责创建自己的对象，且确保只有一个实例被创建。这个类同时也提供了一种访问其唯一实例的方式。</p><p>因此单例模式主要有以下角色：</p><ul><li>单例类 只能创建一个实例的类</li><li>访问类 使用单例类</li></ul><h2 id="单例模式的实现"><a href="#单例模式的实现" class="headerlink" title="单例模式的实现"></a>单例模式的实现</h2><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><blockquote><p>类加载就会导致该单实例对象被创建</p></blockquote><h4 id="静态变量方式"><a href="#静态变量方式" class="headerlink" title="静态变量方式"></a>静态变量方式</h4> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例模式-饿汉式-静态变量方式</span></span><br><span class="line"><span class="comment"> * 该方式在成员位置声明Singleton类的对象instance。实例对象是随着类的加载而创建的。如果该对象足够大的话，而一直不使用会造成内存的浪费。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.私有构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.在本类中创建本类对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.提供外界一个公共的访问方式，让外界获取该对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态代码块方式"><a href="#静态代码块方式" class="headerlink" title="静态代码块方式"></a>静态代码块方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例模式-饿汉式-静态代码块</span></span><br><span class="line"><span class="comment"> * 同方式一，也存在浪费问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明Singleton类型的变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance; <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在静态代码块中进行赋值</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上两种方式在类的加载时就会创建对象，但如果实例化的对象长时间不被使用，则都会带来一定的内存开销。因此并不推荐饿汉式的声明方式。</p><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><blockquote><p>类加载不会导致该单实例对象被创建，而是首次使用该对象时才会创建</p></blockquote><h4 id="方式一（线程不安全）"><a href="#方式一（线程不安全）" class="headerlink" title="方式一（线程不安全）"></a>方式一（线程不安全）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例模式-懒汉式-方式1（线程不安全）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明Singleton类型的变量instance</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  <span class="comment">//  只是声明一个该类型的变量，并没有赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对外提供访问方式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123; <span class="comment">// 每调用这个方法，都会创建一个对象</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式一当有多个先线程在获取单例方法中等待CPU执行权时，导致有多个对象被实例化</p><h4 id="方式二（线程安全）"><a href="#方式二（线程安全）" class="headerlink" title="方式二（线程安全）"></a>方式二（线程安全）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例模式-懒汉式-方式2（线程安全）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明Singleton类型的变量instance</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  <span class="comment">//  只是声明一个该类型的变量，并没有赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对外提供访问方式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123; <span class="comment">// 每调用这个方法，都会创建一个对象</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方法一改方式一，在<code>getInstance</code>方法上加了同步锁，使得线程安全，但由于直接给方法上锁，使得锁粒度过高，大大降低了程序的性能</p><h4 id="方式三（双重检查锁）"><a href="#方式三（双重检查锁）" class="headerlink" title="方式三（双重检查锁）"></a>方式三（双重检查锁）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例模式-懒汉式-双重检查锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// volatile关键字保证可见性和有序性，解决多线程带来的空指针问题</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 第一次判断,如果instance值部位null，则不需要抢占锁</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="comment">// 第二次判断</span></span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在判断为空后，Singleton加上类锁，再进行一次判断，为空则实例化对象。此方法也是一种常见的单例模式的实现方式</p><h4 id="方式四（静态内部类）"><a href="#方式四（静态内部类）" class="headerlink" title="方式四（静态内部类）"></a>方式四（静态内部类）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态内部类方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个静态内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在第一次加载<code>Singleton</code>类时不会去初始化INSTANCE,只有第一次调用<code>getInstance</code>,虚拟机加载<code>SingletonHolder</code>，并初始化<code>INSTANCE</code>,这样不仅能确保线程安全，也能保证<code>Singleton</code>类的唯一性。静态内部类单例模式是一种优秀的单例模式，是开源项目中比较常用的一种单例模式。它利用了JVM的特性，在没有加任何锁的情况下，保证了多线程下的安全，并且没有任何性能影响和间的浪费。</p><h3 id="枚举方式"><a href="#枚举方式" class="headerlink" title="枚举方式"></a>枚举方式</h3><blockquote><p>单元素的枚举类型已经成为实现Singleton的最佳方法</p></blockquote><p>这句话是<strong>Joshua Bloch</strong>前辈在《Effective Java》一书中提到的。此方式不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    INSTANCE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> Singleton.INSTANCE;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">anotherInstance</span> <span class="operator">=</span> Singleton.INSTANCE;</span><br><span class="line">        System.out.println(instance == anotherInstance);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"></span><br><span class="line">进程已结束,退出代码0</span><br></pre></td></tr></table></figure><p>枚举方式属于饿汉式，在不考虑浪费内存空间的情况下，可首选枚举法。上面提到了，枚举方式可以避免反序列化重新创建新的对象，那么看来单例是可以被破坏的，下面就来分析分析</p><h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><p>上面的方式，枚举除外，都可以创建多个对象。有两种实现方式：序列化和反射</p><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>采用懒汉式静态内部类方式创建单例（要继承序列化接口）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        writeObject2File();</span><br><span class="line">        readObjectFromFile();</span><br><span class="line">        readObjectFromFile();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从文件中写对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readObjectFromFile</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1.创建对象输入流对象</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:\\Users\\Lin\\Desktop\\demo.txt&quot;</span>));</span><br><span class="line">        <span class="comment">// 2.读取对象</span></span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> (Singleton) ois.readObject();</span><br><span class="line">        System.out.println(instance);</span><br><span class="line">        <span class="comment">// 3.释放资源</span></span><br><span class="line">        ois.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从文件中读对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeObject2File</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1.获取对象</span></span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        <span class="comment">// 2.创建对象输出流对象</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;C:\\Users\\Lin\\Desktop\\demo.txt&quot;</span>));</span><br><span class="line">        <span class="comment">// 3.写对象</span></span><br><span class="line">        oos.writeObject(instance);</span><br><span class="line">        <span class="comment">// 4.释放资源</span></span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tech.maiquer.signleton.destroy.demo1.Singleton@312b1dae</span><br><span class="line">tech.maiquer.signleton.destroy.demo1.Singleton@7530d0a</span><br><span class="line"></span><br><span class="line">进程已结束,退出代码0</span><br></pre></td></tr></table></figure><p>说明：将单例对象流读取写到桌面的demo文件中，再读取文件取出对象打印出来，发现两次地址并不统一，说明序列化破坏了单例</p><h3 id="反序列破解解决方法"><a href="#反序列破解解决方法" class="headerlink" title="反序列破解解决方法"></a>反序列破解解决方法</h3><p>只需要在<code>Singleton</code>类中增加<code>readResolve</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 解决反序列化破解单例模式</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tech.maiquer.signleton.destroy.demo1.Singleton@3764951d</span><br><span class="line">tech.maiquer.signleton.destroy.demo1.Singleton@3764951d</span><br><span class="line"></span><br><span class="line">进程已结束,退出代码0</span><br></pre></td></tr></table></figure><p>现在就解决了序列化破坏单例的问题了</p><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><p>先同样使用懒汉式静态内部类的方式构造单例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.获取Singleton的字节码对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Singleton.class;</span><br><span class="line">        <span class="comment">// 2.获取无参构造方法对象</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">cons</span> <span class="operator">=</span> clazz.getDeclaredConstructor();</span><br><span class="line">        <span class="comment">// 3.开启访问</span></span><br><span class="line">        cons.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 4.创建Singleton对象</span></span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">s1</span> <span class="operator">=</span> (Singleton) cons.newInstance();</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">s2</span> <span class="operator">=</span> (Singleton) cons.newInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(s1 == s2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过反射，拿到对象构造器，无视<code>private</code>权限</p><p>打印结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span></span><br><span class="line"></span><br><span class="line">进程已结束,退出代码</span><br></pre></td></tr></table></figure><p>发现反射毫无感情的破坏了单例（我单例不要面子的吗…）或许这就是暴力美学吧~~~</p><h3 id="解决反射"><a href="#解决反射" class="headerlink" title="解决反射"></a>解决反射</h3><p>魔高一尺，道高一丈</p><p>既然反射可以任性的获取构造器构造实例，我们拦不住。那就加一个<code>flag</code>标志，限制该类只能创建一个实例</p><p>同样以懒汉式静态内部类为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化为false</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123; <span class="comment">// 方法同步锁，使线程安全</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (flag) &#123; <span class="comment">// 如果flag为真，则说明已经创建过实例了</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;唯一实例已被创建，不能再创建啦！！！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 实例被创建了 则将flag设为真、</span></span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">&quot;main&quot;</span> java.lang.reflect.InvocationTargetException</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)</span><br><span class="line">at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)</span><br><span class="line">at java.lang.reflect.Constructor.newInstance(Constructor.java:423)</span><br><span class="line">at tech.maiquer.signleton.destroy.demo2.Client.main(Client.java:17)</span><br><span class="line">Caused by: java.lang.RuntimeException: 唯一实例已被创建，不能再创建啦！！！</span><br><span class="line">at tech.maiquer.signleton.destroy.demo2.Singleton.&lt;init&gt;(Singleton.java:13)</span><br><span class="line">... 5 more</span><br><span class="line"></span><br><span class="line">进程已结束,退出代码1</span><br></pre></td></tr></table></figure><p>可见，程序出发了运行时异常，告诉我们<strong>唯一实例已存在，休想再贪</strong></p><h2 id="JDK源码实例"><a href="#JDK源码实例" class="headerlink" title="JDK源码实例"></a>JDK源码实例</h2><p>JDK中的Runtime类的构造方式就是一种单例，我们一起来看看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Runtime</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Runtime</span> <span class="variable">currentRuntime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runtime</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the runtime object associated with the current Java application.</span></span><br><span class="line"><span class="comment">     * Most of the methods of class &lt;code&gt;Runtime&lt;/code&gt; are instance</span></span><br><span class="line"><span class="comment">     * methods and must be invoked with respect to the current runtime object.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  the &lt;code&gt;Runtime&lt;/code&gt; object associated with the current</span></span><br><span class="line"><span class="comment">     *          Java application.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Runtime <span class="title function_">getRuntime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> currentRuntime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Don&#x27;t let anyone else instantiate this class */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Runtime</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过前面的铺垫，不难看出，这是一个通过饿汉式创建单例的案例</p><p>该类有很多好玩的函数，例如exec方法，它可以运行终端命令，例如我要获取我的电脑的网卡信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RuntimeDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取Runtime单例</span></span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用runtime的exec方法</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> <span class="string">&quot;ipconfig&quot;</span>;</span><br><span class="line">        <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> runtime.exec(command);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// process对象获取输入流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> process.getInputStream();</span><br><span class="line">        <span class="type">byte</span>[] arr = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取数据</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> is.read(arr); <span class="comment">// 返回读到的字节的个数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(arr, <span class="number">0</span>, len, <span class="string">&quot;GBK&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">Windows IP 配置</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">以太网适配器 以太网:</span><br><span class="line"></span><br><span class="line">   媒体状态  . . . . . . . . . . . . : 媒体已断开连接</span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . : </span><br><span class="line"></span><br><span class="line">无线局域网适配器 本地连接* 10:</span><br><span class="line"></span><br><span class="line">   媒体状态  . . . . . . . . . . . . : 媒体已断开连接</span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . : </span><br><span class="line"></span><br><span class="line">无线局域网适配器 本地连接* 11:</span><br><span class="line"></span><br><span class="line">   媒体状态  . . . . . . . . . . . . : 媒体已断开连接</span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . : </span><br><span class="line"></span><br><span class="line">以太网适配器 SSTAP 1:</span><br><span class="line"></span><br><span class="line">   媒体状态  . . . . . . . . . . . . : 媒体已断开连接</span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . : </span><br><span class="line"></span><br><span class="line">以太网适配器 VMware Network Adapter VMnet1:</span><br><span class="line"></span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . : </span><br><span class="line">   本地链接 IPv6 地址. . . . . . . . : fe80::70c5:6a39:2ffc:e4d1%16</span><br><span class="line">   IPv4 地址 . . . . . . . . . . . . : 192.168.35.1</span><br><span class="line">   子网掩码  . . . . . . . . . . . . : 255.255.255.0</span><br><span class="line">   默认网关. . . . . . . . . . . . . : </span><br><span class="line"></span><br><span class="line">以太网适配器 VMware Network Adapter VMnet8:</span><br><span class="line"></span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . : </span><br><span class="line">   本地链接 IPv6 地址. . . . . . . . : fe80::9506:5df3:8e59:c204%9</span><br><span class="line">   IPv4 地址 . . . . . . . . . . . . : 192.168.221.1</span><br><span class="line">   子网掩码  . . . . . . . . . . . . : 255.255.255.0</span><br><span class="line">   默认网关. . . . . . . . . . . . . : </span><br><span class="line"></span><br><span class="line">以太网适配器 蓝牙网络连接:</span><br><span class="line"></span><br><span class="line">   媒体状态  . . . . . . . . . . . . : 媒体已断开连接</span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . : </span><br><span class="line"></span><br><span class="line">无线局域网适配器 WLAN:</span><br><span class="line"></span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . : </span><br><span class="line">   IPv4 地址 . . . . . . . . . . . . : 192.168.3.119</span><br><span class="line">   子网掩码  . . . . . . . . . . . . : 255.255.255.0</span><br><span class="line">   默认网关. . . . . . . . . . . . . : 192.168.3.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">进程已结束,退出代码0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结束语：</p><blockquote><p>我是自己最大的敌人 — 拿破仑</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt; 创建者模式的主要关注点是”怎样创建对象”，主要特点是”将对象的创建与使用分离”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这样降低了系统耦合度，使用者不需要关注对象的创建细节。&lt;/p&gt;
&lt;p&gt;创建者模式分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单例模式&lt;</summary>
      
    
    
    
    <category term="面试" scheme="https://cheung0-bit.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="设计模式" scheme="https://cheung0-bit.github.io/categories/%E9%9D%A2%E8%AF%95/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://cheung0-bit.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
